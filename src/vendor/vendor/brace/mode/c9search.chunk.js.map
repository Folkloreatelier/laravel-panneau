{"version":3,"sources":["webpack:///vendor/brace/mode/c9search.chunk.js","webpack:////Users/dmp/Code/panneau/js/fields/code/node_modules/brace/mode/c9search.js"],"names":["webpackJsonppanneau","349","module","exports","ace","define","acequire","safeCreateRegexp","source","flag","RegExp","e","oop","lang","TextHighlightRules","C9SearchHighlightRules","this","$rules","start","tokenNames","regex","onMatch","val","state","stack","values","splitRegex","exec","types","tokens","type","value","push","m","str","last","lastIndex","skipped","substring","index","length","substr","parts","split","options","search","replace","i","test","escapeRegExp","token","next","numbers","normalizeRules","inherits","Range","MatchingBraceOutdent","checkOutdent","line","input","autoOutdent","doc","row","getLine","match","column","openBracePos","findMatchingBracket","indent","$getIndent","call","prototype","BaseFoldMode","FoldMode","foldingStartMarker","foldingStopMarker","getFoldWidgetRange","session","foldStyle","lines","getAllLines","level1","level2","re","startRow","endRow","l","getLength","col","TextMode","Mode","C9StyleFoldMode","HighlightRules","$outdent","foldingRules","getNextLineIndent","tab","$id"],"mappings":"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","file":"vendor/brace/mode/c9search.chunk.js","sourcesContent":["webpackJsonppanneau([211],{\n\n/***/ 349:\n/***/ (function(module, exports) {\n\nace.define(\"ace/mode/c9search_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/lib/lang\",\"ace/mode/text_highlight_rules\"],function(acequire,exports,module){\"use strict\";var oop=acequire(\"../lib/oop\");var lang=acequire(\"../lib/lang\");var TextHighlightRules=acequire(\"./text_highlight_rules\").TextHighlightRules;function safeCreateRegexp(source,flag){try{return new RegExp(source,flag);}catch(e){}}var C9SearchHighlightRules=function C9SearchHighlightRules(){this.$rules={\"start\":[{tokenNames:[\"c9searchresults.constant.numeric\",\"c9searchresults.text\",\"c9searchresults.text\",\"c9searchresults.keyword\"],regex:/(^\\s+[0-9]+)(:)(\\d*\\s?)([^\\r\\n]+)/,onMatch:function onMatch(val,state,stack){var values=this.splitRegex.exec(val);var types=this.tokenNames;var tokens=[{type:types[0],value:values[1]},{type:types[1],value:values[2]}];if(values[3]){if(values[3]==\" \")tokens[1]={type:types[1],value:values[2]+\" \"};else tokens.push({type:types[1],value:values[3]});}var regex=stack[1];var str=values[4];var m;var last=0;if(regex&&regex.exec){regex.lastIndex=0;while(m=regex.exec(str)){var skipped=str.substring(last,m.index);last=regex.lastIndex;if(skipped)tokens.push({type:types[2],value:skipped});if(m[0])tokens.push({type:types[3],value:m[0]});else if(!skipped)break;}}if(last<str.length)tokens.push({type:types[2],value:str.substr(last)});return tokens;}},{regex:\"^Searching for [^\\\\r\\\\n]*$\",onMatch:function onMatch(val,state,stack){var parts=val.split(\"\\x01\");if(parts.length<3)return\"text\";var options,search,replace;var i=0;var tokens=[{value:parts[i++]+\"'\",type:\"text\"},{value:search=parts[i++],type:\"text\"// \"c9searchresults.keyword\"\n},{value:\"'\"+parts[i++],type:\"text\"}];if(parts[2]!==\" in\"){replace=parts[i];tokens.push({value:\"'\"+parts[i++]+\"'\",type:\"text\"},{value:parts[i++],type:\"text\"});}tokens.push({value:\" \"+parts[i++]+\" \",type:\"text\"});if(parts[i+1]){options=parts[i+1];tokens.push({value:\"(\"+parts[i+1]+\")\",type:\"text\"});i+=1;}else{i-=1;}while(i++<parts.length){parts[i]&&tokens.push({value:parts[i],type:\"text\"});}if(replace){search=replace;options=\"\";}if(search){if(!/regex/.test(options))search=lang.escapeRegExp(search);if(/whole/.test(options))search=\"\\\\b\"+search+\"\\\\b\";}var regex=search&&safeCreateRegexp(\"(\"+search+\")\",/ sensitive/.test(options)?\"g\":\"ig\");if(regex){stack[0]=state;stack[1]=regex;}return tokens;}},{regex:\"^(?=Found \\\\d+ matches)\",token:\"text\",next:\"numbers\"},{token:\"string\",// single line\nregex:\"^\\\\S:?[^:]+\",next:\"numbers\"}],numbers:[{regex:\"\\\\d+\",token:\"constant.numeric\"},{regex:\"$\",token:\"text\",next:\"start\"}]};this.normalizeRules();};oop.inherits(C9SearchHighlightRules,TextHighlightRules);exports.C9SearchHighlightRules=C9SearchHighlightRules;});ace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"],function(acequire,exports,module){\"use strict\";var Range=acequire(\"../range\").Range;var MatchingBraceOutdent=function MatchingBraceOutdent(){};(function(){this.checkOutdent=function(line,input){if(!/^\\s+$/.test(line))return false;return /^\\s*\\}/.test(input);};this.autoOutdent=function(doc,row){var line=doc.getLine(row);var match=line.match(/^(\\s*\\})/);if(!match)return 0;var column=match[1].length;var openBracePos=doc.findMatchingBracket({row:row,column:column});if(!openBracePos||openBracePos.row==row)return 0;var indent=this.$getIndent(doc.getLine(openBracePos.row));doc.replace(new Range(row,0,row,column-1),indent);};this.$getIndent=function(line){return line.match(/^\\s*/)[0];};}).call(MatchingBraceOutdent.prototype);exports.MatchingBraceOutdent=MatchingBraceOutdent;});ace.define(\"ace/mode/folding/c9search\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],function(acequire,exports,module){\"use strict\";var oop=acequire(\"../../lib/oop\");var Range=acequire(\"../../range\").Range;var BaseFoldMode=acequire(\"./fold_mode\").FoldMode;var FoldMode=exports.FoldMode=function(){};oop.inherits(FoldMode,BaseFoldMode);(function(){this.foldingStartMarker=/^(\\S.*:|Searching for.*)$/;this.foldingStopMarker=/^(\\s+|Found.*)$/;this.getFoldWidgetRange=function(session,foldStyle,row){var lines=session.doc.getAllLines(row);var line=lines[row];var level1=/^(Found.*|Searching for.*)$/;var level2=/^(\\S.*:|\\s*)$/;var re=level1.test(line)?level1:level2;var startRow=row;var endRow=row;if(this.foldingStartMarker.test(line)){for(var i=row+1,l=session.getLength();i<l;i++){if(re.test(lines[i]))break;}endRow=i;}else if(this.foldingStopMarker.test(line)){for(var i=row-1;i>=0;i--){line=lines[i];if(re.test(line))break;}startRow=i;}if(startRow!=endRow){var col=line.length;if(re===level1)col=line.search(/\\(Found[^)]+\\)$|$/);return new Range(startRow,col,endRow,0);}};}).call(FoldMode.prototype);});ace.define(\"ace/mode/c9search\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/c9search_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/folding/c9search\"],function(acequire,exports,module){\"use strict\";var oop=acequire(\"../lib/oop\");var TextMode=acequire(\"./text\").Mode;var C9SearchHighlightRules=acequire(\"./c9search_highlight_rules\").C9SearchHighlightRules;var MatchingBraceOutdent=acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;var C9StyleFoldMode=acequire(\"./folding/c9search\").FoldMode;var Mode=function Mode(){this.HighlightRules=C9SearchHighlightRules;this.$outdent=new MatchingBraceOutdent();this.foldingRules=new C9StyleFoldMode();};oop.inherits(Mode,TextMode);(function(){this.getNextLineIndent=function(state,line,tab){var indent=this.$getIndent(line);return indent;};this.checkOutdent=function(state,line,input){return this.$outdent.checkOutdent(line,input);};this.autoOutdent=function(state,doc,row){this.$outdent.autoOutdent(doc,row);};this.$id=\"ace/mode/c9search\";}).call(Mode.prototype);exports.Mode=Mode;});\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// vendor/brace/mode/c9search.chunk.js","ace.define(\"ace/mode/c9search_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/lib/lang\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar lang = acequire(\"../lib/lang\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nfunction safeCreateRegexp(source, flag) {\n    try {\n        return new RegExp(source, flag);\n    } catch(e) {}\n}\n\nvar C9SearchHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [\n            {\n                tokenNames : [\"c9searchresults.constant.numeric\", \"c9searchresults.text\", \"c9searchresults.text\", \"c9searchresults.keyword\"],\n                regex : /(^\\s+[0-9]+)(:)(\\d*\\s?)([^\\r\\n]+)/,\n                onMatch : function(val, state, stack) {\n                    var values = this.splitRegex.exec(val);\n                    var types = this.tokenNames;\n                    var tokens = [{\n                        type: types[0],\n                        value: values[1]\n                    }, {\n                        type: types[1],\n                        value: values[2]\n                    }];\n                    \n                    if (values[3]) {\n                        if (values[3] == \" \")\n                            tokens[1] = { type: types[1], value: values[2] + \" \" };\n                        else\n                            tokens.push({ type: types[1], value: values[3] });\n                    }\n                    var regex = stack[1];\n                    var str = values[4];\n                    \n                    var m;\n                    var last = 0;\n                    if (regex && regex.exec) {\n                        regex.lastIndex = 0;\n                        while (m = regex.exec(str)) {\n                            var skipped = str.substring(last, m.index);\n                            last = regex.lastIndex;\n                            if (skipped)\n                                tokens.push({type: types[2], value: skipped});\n                            if (m[0])\n                                tokens.push({type: types[3], value: m[0]});\n                            else if (!skipped)\n                                break;\n                        }\n                    }\n                    if (last < str.length)\n                        tokens.push({type: types[2], value: str.substr(last)});\n                    return tokens;\n                }\n            },\n            {\n                regex : \"^Searching for [^\\\\r\\\\n]*$\",\n                onMatch: function(val, state, stack) {\n                    var parts = val.split(\"\\x01\");\n                    if (parts.length < 3)\n                        return \"text\";\n\n                    var options, search, replace;\n                    \n                    var i = 0;\n                    var tokens = [{\n                        value: parts[i++] + \"'\",\n                        type: \"text\"\n                    }, {\n                        value: search = parts[i++],\n                        type: \"text\" // \"c9searchresults.keyword\"\n                    }, {\n                        value: \"'\" + parts[i++],\n                        type: \"text\"\n                    }];\n                    if (parts[2] !== \" in\") {\n                        replace = parts[i];\n                        tokens.push({\n                            value: \"'\" + parts[i++] + \"'\",\n                            type: \"text\"\n                        }, {\n                            value: parts[i++],\n                            type: \"text\"\n                        });\n                    }\n                    tokens.push({\n                        value: \" \" + parts[i++] + \" \",\n                        type: \"text\"\n                    });\n                    if (parts[i+1]) {\n                        options = parts[i+1];\n                        tokens.push({\n                            value: \"(\" + parts[i+1] + \")\",\n                            type: \"text\"\n                        });\n                        i += 1;\n                    } else {\n                        i -= 1;\n                    }\n                    while (i++ < parts.length) {\n                        parts[i] && tokens.push({\n                            value: parts[i],\n                            type: \"text\"\n                        });\n                    }\n                    \n                    if (replace) {\n                        search = replace;\n                        options = \"\";\n                    }\n                    \n                    if (search) {\n                        if (!/regex/.test(options))\n                            search = lang.escapeRegExp(search);\n                        if (/whole/.test(options))\n                            search = \"\\\\b\" + search + \"\\\\b\";\n                    }\n                    \n                    var regex = search && safeCreateRegexp(\n                        \"(\" + search + \")\",\n                        / sensitive/.test(options) ? \"g\" : \"ig\"\n                    );\n                    if (regex) {\n                        stack[0] = state;\n                        stack[1] = regex;\n                    }\n                    \n                    return tokens;\n                }\n            },\n            {\n                regex : \"^(?=Found \\\\d+ matches)\",\n                token : \"text\",\n                next : \"numbers\"\n            },\n            {\n                token : \"string\", // single line\n                regex : \"^\\\\S:?[^:]+\",\n                next : \"numbers\"\n            }\n        ],\n        numbers:[{\n            regex : \"\\\\d+\",\n            token : \"constant.numeric\"\n        }, {\n            regex : \"$\",\n            token : \"text\",\n            next : \"start\"\n        }]\n    };\n    this.normalizeRules();\n};\n\noop.inherits(C9SearchHighlightRules, TextHighlightRules);\n\nexports.C9SearchHighlightRules = C9SearchHighlightRules;\n\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Range = acequire(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/folding/c9search\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.foldingStartMarker = /^(\\S.*:|Searching for.*)$/;\n    this.foldingStopMarker = /^(\\s+|Found.*)$/;\n    \n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var lines = session.doc.getAllLines(row);\n        var line = lines[row];\n        var level1 = /^(Found.*|Searching for.*)$/;\n        var level2 = /^(\\S.*:|\\s*)$/;\n        var re = level1.test(line) ? level1 : level2;\n        \n        var startRow = row;\n        var endRow = row;\n\n        if (this.foldingStartMarker.test(line)) {\n            for (var i = row + 1, l = session.getLength(); i < l; i++) {\n                if (re.test(lines[i]))\n                    break;\n            }\n            endRow = i;\n        }\n        else if (this.foldingStopMarker.test(line)) {\n            for (var i = row - 1; i >= 0; i--) {\n                line = lines[i];\n                if (re.test(line))\n                    break;\n            }\n            startRow = i;\n        }\n        if (startRow != endRow) {\n            var col = line.length;\n            if (re === level1)\n                col = line.search(/\\(Found[^)]+\\)$|$/);\n            return new Range(startRow, col, endRow, 0);\n        }\n    };\n    \n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/c9search\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/c9search_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/folding/c9search\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar C9SearchHighlightRules = acequire(\"./c9search_highlight_rules\").C9SearchHighlightRules;\nvar MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar C9StyleFoldMode = acequire(\"./folding/c9search\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = C9SearchHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new C9StyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    \n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/c9search\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n\n});\n\n\n\n// WEBPACK FOOTER //\n// /Users/dmp/Code/panneau/js/fields/code/node_modules/brace/mode/c9search.js"],"sourceRoot":""}