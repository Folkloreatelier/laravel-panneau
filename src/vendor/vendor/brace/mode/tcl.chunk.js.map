{"version":3,"sources":["webpack:///vendor/brace/mode/tcl.chunk.js","webpack:////Users/dmp/Code/panneau/js/fields/code/node_modules/brace/mode/tcl.js"],"names":["webpackJsonppanneau","340","module","exports","ace","define","acequire","oop","Range","BaseFoldMode","FoldMode","commentRegex","this","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","inherits","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextHighlightRules","TclHighlightRules","$rules","token","regex","next","commandItem","commentfollow","splitlineStart","variable","qqstring","MatchingBraceOutdent","checkOutdent","input","autoOutdent","doc","column","openBracePos","findMatchingBracket","$getIndent","TextMode","Mode","CStyleFoldMode","HighlightRules","$outdent","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","type","$id"],"mappings":"AAAAA,qBAAqB,MAEfC,IACA,SAAUC,EAAQC,GCHxBC,IAAIC,OAAO,2BAA2B,UAAU,UAAU,SAAS,cAAc,YAAY,8BAA+B,SAASC,EAAUH,EAASD,GACxJ,YAEA,IAAIK,GAAMD,EAAS,iBACfE,EAAQF,EAAS,eAAeE,MAChCC,EAAeH,EAAS,eAAeI,SAEvCA,EAAWP,EAAQO,SAAW,SAASC,GACnCA,IACAC,KAAKC,mBAAqB,GAAIC,QAC1BF,KAAKC,mBAAmBE,OAAOC,QAAQ,YAAa,IAAML,EAAaM,QAE3EL,KAAKM,kBAAoB,GAAIJ,QACzBF,KAAKM,kBAAkBH,OAAOC,QAAQ,YAAa,IAAML,EAAaQ,OAIlFZ,GAAIa,SAASV,EAAUD,GAEvB,WAEIG,KAAKC,mBAAqB,8BAC1BD,KAAKM,kBAAoB,kCACzBN,KAAKS,yBAA0B,uBAC/BT,KAAKU,yBAA2B,2BAChCV,KAAKW,cAAgB,4BACrBX,KAAKY,mBAAqBZ,KAAKa,cAC/Bb,KAAKa,cAAgB,SAASC,EAASC,EAAWC,GAC9C,GAAIC,GAAOH,EAAQI,QAAQF,EAE3B,IAAIhB,KAAKS,yBAAyBU,KAAKF,KAC9BjB,KAAKW,cAAcQ,KAAKF,KAAUjB,KAAKU,yBAAyBS,KAAKF,GACtE,MAAO,EAGf,IAAIG,GAAKpB,KAAKY,mBAAmBE,EAASC,EAAWC,EAErD,QAAKI,GAAMpB,KAAKW,cAAcQ,KAAKF,GACxB,QAEJG,GAGXpB,KAAKqB,mBAAqB,SAASP,EAASC,EAAWC,EAAKM,GACxD,GAAIL,GAAOH,EAAQI,QAAQF,EAE3B,IAAIhB,KAAKW,cAAcQ,KAAKF,GACxB,MAAOjB,MAAKuB,sBAAsBT,EAASG,EAAMD,EAErD,IAAIQ,GAAQP,EAAKO,MAAMxB,KAAKC,mBAC5B,IAAIuB,EAAO,CACP,GAAIC,GAAID,EAAME,KAEd,IAAIF,EAAM,GACN,MAAOxB,MAAK2B,oBAAoBb,EAASU,EAAM,GAAIR,EAAKS,EAE5D,IAAIG,GAAQd,EAAQe,oBAAoBb,EAAKS,EAAID,EAAM,GAAGM,OAAQ,EASlE,OAPIF,KAAUA,EAAMG,gBACZT,EACAM,EAAQ5B,KAAKgC,gBAAgBlB,EAASE,GAClB,OAAbD,IACPa,EAAQ,OAGTA,EAGX,GAAkB,cAAdb,EAAJ,CAGA,GAAIS,GAAQP,EAAKO,MAAMxB,KAAKM,kBAC5B,IAAIkB,EAAO,CACP,GAAIC,GAAID,EAAME,MAAQF,EAAM,GAAGM,MAE/B,OAAIN,GAAM,GACCxB,KAAKiC,oBAAoBnB,EAASU,EAAM,GAAIR,EAAKS,GAErDX,EAAQe,oBAAoBb,EAAKS,GAAI,MAIpDzB,KAAKgC,gBAAkB,SAASlB,EAASE,GACrC,GAAIC,GAAOH,EAAQI,QAAQF,GACvBkB,EAAcjB,EAAKkB,OAAO,MAC1BC,EAAWpB,EACXqB,EAAcpB,EAAKa,MACvBd,IAAY,CAGZ,KAFA,GAAIsB,GAAStB,EACTuB,EAASzB,EAAQ0B,cACZxB,EAAMuB,GAAQ,CACnBtB,EAAOH,EAAQI,QAAQF,EACvB,IAAIyB,GAASxB,EAAKkB,OAAO,KACzB,KAAgB,IAAZM,EAAJ,CAEA,GAAKP,EAAcO,EACf,KACJ,IAAIC,GAAW1C,KAAKqB,mBAAmBP,EAAS,MAAOE,EAEvD,IAAI0B,EAAU,CACV,GAAIA,EAASrC,MAAMW,KAAOoB,EACtB,KACG,IAAIM,EAASX,cAChBf,EAAM0B,EAASnC,IAAIS,QAChB,IAAIkB,GAAeO,EACtB,MAGRH,EAAStB,GAGb,MAAO,IAAIpB,GAAMwC,EAAUC,EAAaC,EAAQxB,EAAQI,QAAQoB,GAAQR,SAE5E9B,KAAKuB,sBAAwB,SAAST,EAASG,EAAMD,GAOjD,IANA,GAAIqB,GAAcpB,EAAKkB,OAAO,QAC1BI,EAASzB,EAAQ0B,YACjBJ,EAAWpB,EAEX2B,EAAK,uCACLC,EAAQ,IACH5B,EAAMuB,GAAQ,CACnBtB,EAAOH,EAAQI,QAAQF,EACvB,IAAI6B,GAAIF,EAAGG,KAAK7B,EAChB,IAAK4B,IACDA,EAAE,GAAID,IACLA,KAEAA,GAAO,MAGhB,GAAIN,GAAStB,CACb,IAAIsB,EAASF,EACT,MAAO,IAAIxC,GAAMwC,EAAUC,EAAaC,EAAQrB,EAAKa,UAI9DiB,KAAKjD,EAASkD,aAIjBxD,IAAIC,OAAO,gCAAgC,UAAU,UAAU,SAAS,cAAc,iCAAkC,SAASC,EAAUH,EAASD,GACpJ,YAEA,IAAIK,GAAMD,EAAS,cACfuD,EAAqBvD,EAAS,0BAA0BuD,mBAExDC,EAAoB,WAEpBlD,KAAKmD,QACD9C,QAEQ+C,MAAQ,UACRC,MAAQ,WACRC,KAAQ,kBAERF,MAAQ,UACRC,MAAQ,SAERD,MAAQ,mBACRC,MAAQ,UACRC,KAAQ,mBAERF,MAAQ,OACRC,MAAQ,uBAERD,MAAQ,OACRC,MAAQ,uBACRC,KAAQ,gBAERF,MAAQ,SACRC,MAAQ,2CAERD,MAAQ,SACRC,MAAQ,UACRC,KAAQ,aAERF,MAAQ,oBACRC,MAAQ,MACRC,KAAQ,aAERF,MAAQ,mBACRC,MAAQ,4IAERD,MAAQ,aACRC,MAAQ,gCAERD,MAAQ,eACRC,MAAQ,OACRC,KAAQ,gBAERF,MAAQ,eACRC,MAAQ,QAERD,MAAQ,eACRC,MAAQ,YAERD,MAAQ,OACRC,MAAQ,SAGhBE,cAEQH,MAAQ,UACRC,MAAQ,WACRC,KAAQ,kBAERF,MAAQ,UACRC,MAAQ,OACRC,KAAQ,UAERF,MAAQ,SACRC,MAAQ,2CAERD,MAAQ,oBACRC,MAAQ,MACRC,KAAQ,aAERF,MAAQ,mBACRC,MAAQ,qCACRC,KAAQ,gBAERF,MAAQ,mBACRC,MAAQ,2BACRC,KAAQ,gBAERF,MAAQ,mBACRC,MAAQ,aACRC,KAAQ,gBAERF,MAAQ,eACRC,MAAQ,YAERD,MAAQ,mBACRC,MAAQ,4IAERD,MAAQ,UACRC,MAAQ,iBACRC,KAAQ,UAEhBE,gBAEQJ,MAAQ,UACRC,MAAQ,UACRC,KAAQ,kBAERF,MAAQ,UACRC,MAAQ,KACRC,KAAQ,UAEhBG,iBAEQL,MAAQ,OACRC,MAAQ,KACRC,KAAQ,UAEhBI,WAEQN,MAAQ,oBACRC,MAAQ,wCACRC,KAAQ,UAERF,MAAQ,oBACRC,MAAQ,oBACRC,KAAQ,UAEhBK,WACIP,MAAQ,SACRC,MAAQ,yBACRC,KAAO,UAEPF,MAAQ,SACRC,MAAQ,QAKpB1D,GAAIa,SAAS0C,EAAmBD,GAEhC1D,EAAQ2D,kBAAoBA,IAG5B1D,IAAIC,OAAO,mCAAmC,UAAU,UAAU,SAAS,aAAc,SAASC,EAAUH,EAASD,GACrH,YAEA,IAAIM,GAAQF,EAAS,YAAYE,MAE7BgE,EAAuB,cAE3B,WAEI5D,KAAK6D,aAAe,SAAS5C,EAAM6C,GAC/B,QAAM,QAAQ3C,KAAKF,IAGZ,SAASE,KAAK2C,IAGzB9D,KAAK+D,YAAc,SAASC,EAAKhD,GAC7B,GAAIC,GAAO+C,EAAI9C,QAAQF,GACnBQ,EAAQP,EAAKO,MAAM,WAEvB,KAAKA,EAAO,MAAO,EAEnB,IAAIyC,GAASzC,EAAM,GAAGM,OAClBoC,EAAeF,EAAIG,qBAAqBnD,IAAKA,EAAKiD,OAAQA,GAE9D,KAAKC,GAAgBA,EAAalD,KAAOA,EAAK,MAAO,EAErD,IAAIyB,GAASzC,KAAKoE,WAAWJ,EAAI9C,QAAQgD,EAAalD,KACtDgD,GAAI5D,QAAQ,GAAIR,GAAMoB,EAAK,EAAGA,EAAKiD,EAAO,GAAIxB,IAGlDzC,KAAKoE,WAAa,SAASnD,GACvB,MAAOA,GAAKO,MAAM,QAAQ,MAG/BuB,KAAKa,EAAqBZ,WAE7BzD,EAAQqE,qBAAuBA,IAG/BpE,IAAIC,OAAO,gBAAgB,UAAU,UAAU,SAAS,cAAc,gBAAgB,0BAA0B,+BAA+B,kCAAkC,aAAc,SAASC,EAAUH,EAASD,GAC3N,YAEA,IAAIK,GAAMD,EAAS,cACf2E,EAAW3E,EAAS,UAAU4E,KAC9BC,EAAiB7E,EAAS,oBAAoBI,SAC9CoD,EAAoBxD,EAAS,yBAAyBwD,kBACtDU,EAAuBlE,EAAS,4BAA4BkE,qBAG5DU,GAFQ5E,EAAS,YAAYE,MAEtB,WACPI,KAAKwE,eAAiBtB,EACtBlD,KAAKyE,SAAW,GAAIb,GACpB5D,KAAK0E,aAAe,GAAIH,GACxBvE,KAAK2E,WAAa3E,KAAK4E,mBAE3BjF,GAAIa,SAAS8D,EAAMD,GAEnB,WAEIrE,KAAK6E,iBAAmB,IAExB7E,KAAK8E,kBAAoB,SAASC,EAAO9D,EAAM+D,GAC3C,GAAIvC,GAASzC,KAAKoE,WAAWnD,GAEzBgE,EAAgBjF,KAAKkF,eAAeC,cAAclE,EAAM8D,GACxDK,EAASH,EAAcG,MAE3B,IAAIA,EAAOtD,QAA0C,WAAhCsD,EAAOA,EAAOtD,OAAO,GAAGuD,KACzC,MAAO5C,EAGX,IAAa,SAATsC,EAAkB,CACN9D,EAAKO,MAAM,qBAEnBiB,GAAUuC,GAIlB,MAAOvC,IAGXzC,KAAK6D,aAAe,SAASkB,EAAO9D,EAAM6C,GACtC,MAAO9D,MAAKyE,SAASZ,aAAa5C,EAAM6C,IAG5C9D,KAAK+D,YAAc,SAASgB,EAAOf,EAAKhD,GACpChB,KAAKyE,SAASV,YAAYC,EAAKhD,IAGnChB,KAAKsF,IAAM,gBACZvC,KAAKuB,EAAKtB,WAEbzD,EAAQ+E,KAAOA","file":"vendor/brace/mode/tcl.chunk.js","sourcesContent":["webpackJsonppanneau([122],{\n\n/***/ 340:\n/***/ (function(module, exports) {\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],function(acequire,exports,module){\"use strict\";var oop=acequire(\"../../lib/oop\");var Range=acequire(\"../../range\").Range;var BaseFoldMode=acequire(\"./fold_mode\").FoldMode;var FoldMode=exports.FoldMode=function(commentRegex){if(commentRegex){this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+commentRegex.start));this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+commentRegex.end));}};oop.inherits(FoldMode,BaseFoldMode);(function(){this.foldingStartMarker=/(\\{|\\[)[^\\}\\]]*$|^\\s*(\\/\\*)/;this.foldingStopMarker=/^[^\\[\\{]*(\\}|\\])|^[\\s\\*]*(\\*\\/)/;this.singleLineBlockCommentRe=/^\\s*(\\/\\*).*\\*\\/\\s*$/;this.tripleStarBlockCommentRe=/^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;this.startRegionRe=/^\\s*(\\/\\*|\\/\\/)#?region\\b/;this._getFoldWidgetBase=this.getFoldWidget;this.getFoldWidget=function(session,foldStyle,row){var line=session.getLine(row);if(this.singleLineBlockCommentRe.test(line)){if(!this.startRegionRe.test(line)&&!this.tripleStarBlockCommentRe.test(line))return\"\";}var fw=this._getFoldWidgetBase(session,foldStyle,row);if(!fw&&this.startRegionRe.test(line))return\"start\";// lineCommentRegionStart\nreturn fw;};this.getFoldWidgetRange=function(session,foldStyle,row,forceMultiline){var line=session.getLine(row);if(this.startRegionRe.test(line))return this.getCommentRegionBlock(session,line,row);var match=line.match(this.foldingStartMarker);if(match){var i=match.index;if(match[1])return this.openingBracketBlock(session,match[1],row,i);var range=session.getCommentFoldRange(row,i+match[0].length,1);if(range&&!range.isMultiLine()){if(forceMultiline){range=this.getSectionRange(session,row);}else if(foldStyle!=\"all\")range=null;}return range;}if(foldStyle===\"markbegin\")return;var match=line.match(this.foldingStopMarker);if(match){var i=match.index+match[0].length;if(match[1])return this.closingBracketBlock(session,match[1],row,i);return session.getCommentFoldRange(row,i,-1);}};this.getSectionRange=function(session,row){var line=session.getLine(row);var startIndent=line.search(/\\S/);var startRow=row;var startColumn=line.length;row=row+1;var endRow=row;var maxRow=session.getLength();while(++row<maxRow){line=session.getLine(row);var indent=line.search(/\\S/);if(indent===-1)continue;if(startIndent>indent)break;var subRange=this.getFoldWidgetRange(session,\"all\",row);if(subRange){if(subRange.start.row<=startRow){break;}else if(subRange.isMultiLine()){row=subRange.end.row;}else if(startIndent==indent){break;}}endRow=row;}return new Range(startRow,startColumn,endRow,session.getLine(endRow).length);};this.getCommentRegionBlock=function(session,line,row){var startColumn=line.search(/\\s*$/);var maxRow=session.getLength();var startRow=row;var re=/^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;var depth=1;while(++row<maxRow){line=session.getLine(row);var m=re.exec(line);if(!m)continue;if(m[1])depth--;else depth++;if(!depth)break;}var endRow=row;if(endRow>startRow){return new Range(startRow,startColumn,endRow,line.length);}};}).call(FoldMode.prototype);});ace.define(\"ace/mode/tcl_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],function(acequire,exports,module){\"use strict\";var oop=acequire(\"../lib/oop\");var TextHighlightRules=acequire(\"./text_highlight_rules\").TextHighlightRules;var TclHighlightRules=function TclHighlightRules(){this.$rules={\"start\":[{token:\"comment\",regex:\"#.*\\\\\\\\$\",next:\"commentfollow\"},{token:\"comment\",regex:\"#.*$\"},{token:\"support.function\",regex:'[\\\\\\\\]$',next:\"splitlineStart\"},{token:\"text\",regex:/\\\\(?:[\"{}\\[\\]$\\\\])/},{token:\"text\",// last value before command\nregex:'^|[^{][;][^}]|[/\\r/]',next:\"commandItem\"},{token:\"string\",// single line\nregex:'[ ]*[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'},{token:\"string\",// multi line \"\"\" string start\nregex:'[ ]*[\"]',next:\"qqstring\"},{token:\"variable.instance\",regex:\"[$]\",next:\"variable\"},{token:\"support.function\",regex:\"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|{\\\\*}|;|::\"},{token:\"identifier\",regex:\"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"},{token:\"paren.lparen\",regex:\"[[{]\",next:\"commandItem\"},{token:\"paren.lparen\",regex:\"[(]\"},{token:\"paren.rparen\",regex:\"[\\\\])}]\"},{token:\"text\",regex:\"\\\\s+\"}],\"commandItem\":[{token:\"comment\",regex:\"#.*\\\\\\\\$\",next:\"commentfollow\"},{token:\"comment\",regex:\"#.*$\",next:\"start\"},{token:\"string\",// single line\nregex:'[ ]*[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'},{token:\"variable.instance\",regex:\"[$]\",next:\"variable\"},{token:\"support.function\",regex:\"(?:[:][:])[a-zA-Z0-9_/]+(?:[:][:])\",next:\"commandItem\"},{token:\"support.function\",regex:\"[a-zA-Z0-9_/]+(?:[:][:])\",next:\"commandItem\"},{token:\"support.function\",regex:\"(?:[:][:])\",next:\"commandItem\"},{token:\"paren.rparen\",regex:\"[\\\\])}]\"},{token:\"support.function\",regex:\"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|{\\\\*}|;|::\"},{token:\"keyword\",regex:\"[a-zA-Z0-9_/]+\",next:\"start\"}],\"commentfollow\":[{token:\"comment\",regex:\".*\\\\\\\\$\",next:\"commentfollow\"},{token:\"comment\",regex:'.+',next:\"start\"}],\"splitlineStart\":[{token:\"text\",regex:\"^.\",next:\"start\"}],\"variable\":[{token:\"variable.instance\",// variable tcl\nregex:\"[a-zA-Z_\\\\d]+(?:[(][a-zA-Z_\\\\d]+[)])?\",next:\"start\"},{token:\"variable.instance\",// variable tcl with braces\nregex:\"{?[a-zA-Z_\\\\d]+}?\",next:\"start\"}],\"qqstring\":[{token:\"string\",// multi line \"\"\" string end\nregex:'(?:[^\\\\\\\\]|\\\\\\\\.)*?[\"]',next:\"start\"},{token:\"string\",regex:'.+'}]};};oop.inherits(TclHighlightRules,TextHighlightRules);exports.TclHighlightRules=TclHighlightRules;});ace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"],function(acequire,exports,module){\"use strict\";var Range=acequire(\"../range\").Range;var MatchingBraceOutdent=function MatchingBraceOutdent(){};(function(){this.checkOutdent=function(line,input){if(!/^\\s+$/.test(line))return false;return /^\\s*\\}/.test(input);};this.autoOutdent=function(doc,row){var line=doc.getLine(row);var match=line.match(/^(\\s*\\})/);if(!match)return 0;var column=match[1].length;var openBracePos=doc.findMatchingBracket({row:row,column:column});if(!openBracePos||openBracePos.row==row)return 0;var indent=this.$getIndent(doc.getLine(openBracePos.row));doc.replace(new Range(row,0,row,column-1),indent);};this.$getIndent=function(line){return line.match(/^\\s*/)[0];};}).call(MatchingBraceOutdent.prototype);exports.MatchingBraceOutdent=MatchingBraceOutdent;});ace.define(\"ace/mode/tcl\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/folding/cstyle\",\"ace/mode/tcl_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/range\"],function(acequire,exports,module){\"use strict\";var oop=acequire(\"../lib/oop\");var TextMode=acequire(\"./text\").Mode;var CStyleFoldMode=acequire(\"./folding/cstyle\").FoldMode;var TclHighlightRules=acequire(\"./tcl_highlight_rules\").TclHighlightRules;var MatchingBraceOutdent=acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;var Range=acequire(\"../range\").Range;var Mode=function Mode(){this.HighlightRules=TclHighlightRules;this.$outdent=new MatchingBraceOutdent();this.foldingRules=new CStyleFoldMode();this.$behaviour=this.$defaultBehaviour;};oop.inherits(Mode,TextMode);(function(){this.lineCommentStart=\"#\";this.getNextLineIndent=function(state,line,tab){var indent=this.$getIndent(line);var tokenizedLine=this.getTokenizer().getLineTokens(line,state);var tokens=tokenizedLine.tokens;if(tokens.length&&tokens[tokens.length-1].type==\"comment\"){return indent;}if(state==\"start\"){var match=line.match(/^.*[\\{\\(\\[]\\s*$/);if(match){indent+=tab;}}return indent;};this.checkOutdent=function(state,line,input){return this.$outdent.checkOutdent(line,input);};this.autoOutdent=function(state,doc,row){this.$outdent.autoOutdent(doc,row);};this.$id=\"ace/mode/tcl\";}).call(Mode.prototype);exports.Mode=Mode;});\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// vendor/brace/mode/tcl.chunk.js","ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /(\\{|\\[)[^\\}\\]]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{]*(\\}|\\])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/tcl_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar TclHighlightRules = function() {\n\n    this.$rules = {\n        \"start\" : [\n           {\n                token : \"comment\",\n                regex : \"#.*\\\\\\\\$\",\n                next  : \"commentfollow\"\n            }, {\n                token : \"comment\",\n                regex : \"#.*$\"\n            }, {\n                token : \"support.function\",\n                regex : '[\\\\\\\\]$',\n                next  : \"splitlineStart\"\n            }, {\n                token : \"text\",\n                regex : /\\\\(?:[\"{}\\[\\]$\\\\])/\n            }, {\n                token : \"text\", // last value before command\n                regex : '^|[^{][;][^}]|[/\\r/]',\n                next  : \"commandItem\"\n            }, {\n                token : \"string\", // single line\n                regex : '[ ]*[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n            }, {\n                token : \"string\", // multi line \"\"\" string start\n                regex : '[ ]*[\"]',\n                next  : \"qqstring\"\n            }, {\n                token : \"variable.instance\",\n                regex : \"[$]\",\n                next  : \"variable\"\n            }, {\n                token : \"support.function\",\n                regex : \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|{\\\\*}|;|::\"\n            }, {\n                token : \"identifier\",\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[[{]\",\n                next  : \"commandItem\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[(]\"\n            },  {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}]\"\n            }, {\n                token : \"text\",\n                regex : \"\\\\s+\"\n            }\n        ],\n        \"commandItem\" : [\n            {\n                token : \"comment\",\n                regex : \"#.*\\\\\\\\$\",\n                next  : \"commentfollow\"\n            }, {\n                token : \"comment\",\n                regex : \"#.*$\",\n                next  : \"start\"\n            }, {\n                token : \"string\", // single line\n                regex : '[ ]*[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n            }, {\n                token : \"variable.instance\", \n                regex : \"[$]\",\n                next  : \"variable\"\n            }, {\n                token : \"support.function\",\n                regex : \"(?:[:][:])[a-zA-Z0-9_/]+(?:[:][:])\",\n                next  : \"commandItem\"\n            }, {\n                token : \"support.function\",\n                regex : \"[a-zA-Z0-9_/]+(?:[:][:])\",\n                next  : \"commandItem\"\n            }, {\n                token : \"support.function\",\n                regex : \"(?:[:][:])\",\n                next  : \"commandItem\"\n            }, {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}]\"\n            }, {\n                token : \"support.function\",\n                regex : \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|{\\\\*}|;|::\"\n            }, {\n                token : \"keyword\",\n                regex : \"[a-zA-Z0-9_/]+\",\n                next  : \"start\"\n            } ],\n        \"commentfollow\" : [ \n            {\n                token : \"comment\",\n                regex : \".*\\\\\\\\$\",\n                next  : \"commentfollow\"\n            }, {\n                token : \"comment\",\n                regex : '.+',\n                next  : \"start\"\n        } ],\n        \"splitlineStart\" : [ \n            {\n                token : \"text\",\n                regex : \"^.\",\n                next  : \"start\"\n            }],\n        \"variable\" : [ \n            {\n                token : \"variable.instance\", // variable tcl\n                regex : \"[a-zA-Z_\\\\d]+(?:[(][a-zA-Z_\\\\d]+[)])?\",\n                next  : \"start\"\n            }, {\n                token : \"variable.instance\", // variable tcl with braces\n                regex : \"{?[a-zA-Z_\\\\d]+}?\",\n                next  : \"start\"\n            }],  \n        \"qqstring\" : [ {\n            token : \"string\", // multi line \"\"\" string end\n            regex : '(?:[^\\\\\\\\]|\\\\\\\\.)*?[\"]',\n            next : \"start\"\n        }, {\n            token : \"string\",\n            regex : '.+'\n        } ]\n    };\n};\n\noop.inherits(TclHighlightRules, TextHighlightRules);\n\nexports.TclHighlightRules = TclHighlightRules;\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Range = acequire(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/tcl\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/folding/cstyle\",\"ace/mode/tcl_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar CStyleFoldMode = acequire(\"./folding/cstyle\").FoldMode;\nvar TclHighlightRules = acequire(\"./tcl_highlight_rules\").TclHighlightRules;\nvar MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar Range = acequire(\"../range\").Range;\n\nvar Mode = function() {\n    this.HighlightRules = TclHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new CStyleFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"#\";\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n        \n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/tcl\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n\n\n\n// WEBPACK FOOTER //\n// /Users/dmp/Code/panneau/js/fields/code/node_modules/brace/mode/tcl.js"],"sourceRoot":""}