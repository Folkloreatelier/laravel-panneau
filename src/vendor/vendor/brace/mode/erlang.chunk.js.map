{"version":3,"sources":["webpack:///vendor/brace/mode/erlang.chunk.js","webpack:////Users/dmp/Code/panneau/js/fields/code/node_modules/brace/mode/erlang.js"],"names":["webpackJsonppanneau","246","module","exports","ace","define","acequire","oop","TextHighlightRules","ErlangHighlightRules","this","$rules","start","include","#atom","token","regex","push","next","defaultToken","#behaviour-directive","#binary","#character","#comment","push_","#define-directive","#directive","#everything-else","#expression","#function","#function-call","#import-export-directive","#internal-expression-punctuation","#internal-function-list","#internal-function-parts","#internal-record-body","#internal-type-specifiers","#keyword","#list","#macro-directive","#macro-usage","#module-directive","#number","#parenthesized-expression","#record-directive","#record-usage","#string","#symbolic-operator","#textual-operator","#tuple","#variable","normalizeRules","metaData","comment","fileTypes","keyEquivalent","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id"],"mappings":"AAAAA,qBAAqB,MAEfC,IACA,SAAUC,EAAQC,GCHxBC,IAAIC,OAAO,mCAAmC,UAAU,UAAU,SAAS,cAAc,iCAAkC,SAASC,EAAUH,EAASD,GACvJ,YAEA,IAAIK,GAAMD,EAAS,cACfE,EAAqBF,EAAS,0BAA0BE,mBAExDC,EAAuB,WAEvBC,KAAKC,QAAWC,QACTC,QAAS,sBACTA,QAAS,6BACTA,QAAS,yBACTA,QAAS,sBACTA,QAAS,sBACTA,QAAS,qBACTA,QAAS,eACTA,QAAS,cACTA,QAAS,qBACdC,UACKC,MAAO,6CACPC,MAAO,IACPC,OACKF,MAAO,2CACPC,MAAO,IACPE,KAAM,QACNH,OACG,uCACA,sCACA,uCACA,sCACA,uCACHC,MAAO,6DACPD,MAAO,8BAA+BC,MAAO,eAC7CG,aAAc,iDACnBJ,MAAO,wCACPC,MAAO,wBACZI,yBACKL,OACG,kCACA,6CACA,kCACA,6CACA,kCACA,iDACA,kCACA,qDACA,kCACA,+CACA,kCACA,4CACHC,MAAO,4FACZK,YACKN,MAAO,6CACPC,MAAO,KACPC,OACKF,MAAO,2CACPC,MAAO,KACPE,KAAM,QACNH,OACG,sCACA,2CACHC,MAAO,YACPH,QAAS,8BACTA,QAAS,qBACTM,aAAc,mCACxBG,eACKP,OACG,0CACA,uCACA,mCACA,uCACA,mCACA,oCACHC,MAAO,kEACPD,MAAO,mCACPC,MAAO,kBACPD,OACG,0CACA,6BACHC,MAAO,eACPD,MAAO,mCAAoCC,MAAO,UACvDO,aACKR,MAAO,wCACPC,MAAO,OACPQ,QACKT,MAAO,iCACPC,MAAO,IACPE,KAAM,QACNC,aAAc,qCACxBM,sBACKV,OACG,+BACA,6CACA,+BACA,0CACA,+BACA,iDACA,+BACA,+CACA,+BACA,2CACHC,MAAO,qEACPC,OACKF,OACG,+CACA,+BACA,4CACHC,MAAO,mBACPE,KAAM,QACNL,QAAS,qBACTM,aAAc,mCACnBJ,MAAO,+BACPC,MAAO,uDACPC,OACKF,OACG,+CACA,+BACA,4CACHC,MAAO,mBACPE,KAAM,QACNH,OACG,OACA,6CACA,OACA,0CACA,OACA,iDACA,OACA,+CACA,OACA,kDACHC,MAAO,uEACPC,OACKF,OACG,+CACA,OACA,2CACHC,MAAO,iBACPE,KAAM,QACNH,MAAO,0CAA2CC,MAAO,MACzDH,QAAS,uBACdE,MAAO,sCACPC,MAAO,4BACPH,QAAS,qBACTM,aAAc,mCACxBO,eACKX,OACG,wBACA,6CACA,wBACA,mCACA,wBACA,kDACHC,MAAO,oDACPC,OACKF,OACG,+CACA,wBACA,4CACHC,MAAO,oBACPE,KAAM,QACNL,QAAS,qBACTM,aAAc,4BACnBJ,OACG,wBACA,6CACA,wBACA,mCACA,wBACA,4CACHC,MAAO,qDACZW,qBACKd,QAAS,aACTA,QAAS,kBACTA,QAAS,iBACTA,QAAS,gBACTA,QAAS,aACTA,QAAS,sBACTA,QAAS,mBACTA,QAAS,WACTA,QAAS,UACTA,QAAS,YACTA,QAAS,8BACTA,QAAS,eACTA,QAAS,YACTA,QAAS,UACTA,QAAS,YACTA,QAAS,uBACTA,QAAS,cACde,gBACKb,MAAO,4BACPC,MAAO,WACPC,OACKF,MAAO,6BACPC,MAAO,YACPE,KAAM,QACNL,QAAS,qCACTA,QAAS,qBACTM,aAAc,gCACnBJ,MAAO,8BACPC,MAAO,aACPC,OACKF,MAAO,6BACPC,MAAO,YACPE,KAAM,QACNL,QAAS,qCACTA,QAAS,qBACTM,aAAc,kCACnBJ,MAAO,iCACPC,MAAO,gBACPC,OACKF,MAAO,6BACPC,MAAO,YACPE,KAAM,QACNL,QAAS,qCACTA,QAAS,qBACTM,aAAc,qCACnBJ,OACG,6BACA,OACA,uCACA,OACA,+CACA,OACA,8BACA,OACA,+CACHC,MAAO,0FACPD,MAAO,6BACPC,MAAO,YACPC,OACKF,MAAO,6BACPC,MAAO,YACPE,KAAM,QACNH,MAAO,OACPC,MAAO,UACPC,OACKF,MAAO,uCACPC,MAAO,kBACPE,KAAM,QACNL,QAAS,+BACdA,QAAS,qBACTM,aAAc,iCACnBJ,MAAO,6BACPC,MAAO,YACPC,OACKF,MAAO,6BACPC,MAAO,YACPE,KAAM,QACNL,QAAS,qCACTA,QAAS,qBACTM,aAAc,iCACnBJ,MAAO,+BACPC,MAAO,cACPC,OACKF,MAAO,6BACPC,MAAO,YACPE,KAAM,QACNL,QAAS,qCACTA,QAAS,qBACTM,aAAc,mCACnBJ,MAAO,+BACPC,MAAO,cACPC,OACKF,MAAO,6BACPC,MAAO,YACPE,KAAM,QACNL,QAAS,qBACTM,aAAc,mCACxBU,cACKd,OACG,uBACA,yCACA,wBACHC,MAAO,oDACPC,OACKF,MAAO,yCACPC,MAAO,MACPE,KAAM,QACNH,OAAS,OAAQ,8BAA+B,QAChDC,MAAO,sDACPD,MAAO,OACPC,MAAO,UACPC,OACKF,MAAO,uCACPC,MAAO,YACPE,KAAM,QACNL,QAAS,8BACTA,QAAS,+BACdA,QAAS,qBACTM,aAAc,2BACxBW,mBACKf,MAAO,4BACPC,MAAO,6FACPC,OACKF,MAAO,+CACPC,MAAO,MACPE,KAAM,QACNH,OACG,uCACA,OACA,+CACA,OACA,oCACA,OACA,kDACHC,MAAO,8NACPC,OACKF,MAAO,OAAQC,MAAO,UAAWE,KAAM,QACvCH,MAAO,0CAA2CC,MAAO,MACzDH,QAAS,uBACdE,OACG,uCACA,OACA,+CACA,OACA,8BACA,OACA,kDACHC,MAAO,4FACPC,OACKF,MAAO,OAAQC,MAAO,UAAWE,KAAM,QACvCH,MAAO,0CAA2CC,MAAO,MACzDH,QAAS,uBACdM,aAAc,gCACxBY,6BACKhB,OACG,+BACA,6CACA,+BACA,0CACA,+BACA,iDACA,+BACA,uCACA,+BACA,2CACHC,MAAO,kFACPC,OACKF,OACG,+CACA,+BACA,4CACHC,MAAO,mBACPE,KAAM,QACNL,QAAS,4BACTM,aAAc,mCACnBJ,OACG,+BACA,6CACA,+BACA,0CACA,+BACA,kDACHC,MAAO,sCACPC,OACKF,OACG,+CACA,+BACA,4CACHC,MAAO,mBACPE,KAAM,QACNL,QAAS,4BACTM,aAAc,mCACxBa,qCACKjB,OACG,gDACA,uCACA,4CACHC,MAAO,iBACZiB,4BACKlB,MAAO,2CACPC,MAAO,MACPC,OACKF,MAAO,yCACPC,MAAO,MACPE,KAAM,QACNH,OACG,8BACA,OACA,+CACHC,MAAO,yCACPC,OACKF,MAAO,oCACPC,MAAO,YACPE,KAAM,QACNL,QAAS,uBACdA,QAAS,qBACTM,aAAc,0CACxBe,6BACKnB,MAAO,OACPC,MAAO,UACPC,OACKF,MAAO,gDACPC,MAAO,KACPE,KAAM,QACNH,MAAO,iDACPC,MAAO,MACPC,OACKF,MAAO,+CACPC,MAAO,MACPE,KAAM,QACNH,MAAO,0CAA2CC,MAAO,MACzDH,QAAS,uBACdE,MAAO,sCAAuCC,MAAO,QACrDH,QAAS,uBACdE,MAAO,2CACPC,MAAO,MACPH,QAAS,qBACdsB,0BACKpB,MAAO,mDACPC,MAAO,MACPC,OACKF,MAAO,+BACPC,MAAO,UACPE,KAAM,QACNH,OACG,8BACA,yCACA,OACA,sCACHC,MAAO,oDACPC,OACKF,MAAO,4CACPC,MAAO,YACPE,KAAM,QACNL,QAAS,uBACdE,OACG,8BACA,OACA,6CACHC,MAAO,gDACPH,QAAS,qBACTM,aAAc,mCACxBiB,8BACKrB,MAAO,0CACPC,MAAO,IACPC,OACKF,MAAO,OAAQC,MAAO,aAAcE,KAAM,QAC1CH,OACG,sBACA,qCACA,qCACA,+BACA,gDACHC,MAAO,mGACjBqB,aACKtB,MAAO,yBACPC,MAAO,mFACZsB,UACKvB,MAAO,2CACPC,MAAO,MACPC,OACKF,MAAO,yCACPC,MAAO,MACPE,KAAM,QACNH,MAAO,oCACPC,MAAO,iBACPH,QAAS,qBACTM,aAAc,iCACxBoB,qBACKxB,OACG,8BACA,6CACA,8BACA,yCACA,8BACA,iDACA,8BACA,oCACA,8BACA,+CACA,8BACA,4CACHC,MAAO,mFACPD,OACG,+BACA,6CACA,+BACA,0CACA,+BACA,iDACA,+BACA,oCACA,+BACA,+CACA,+BACA,4CACHC,MAAO,oFACPD,OACG,8BACA,6CACA,8BACA,yCACA,8BACA,iDACA,8BACA,oCACA,8BACA,+CACA,8BACA,4CACHC,MAAO,mFACZwB,iBACKzB,OACG,gCACA,0BACA,qCACHC,MAAO,oCACZyB,sBACK1B,OACG,+BACA,6CACA,+BACA,0CACA,+BACA,iDACA,+BACA,kDACA,+BACA,+CACA,+BACA,4CACHC,MAAO,yFACZ0B,YACK3B,MAAO,OACPC,MAAO,UACPC,OACKF,MAAO,OAAQC,MAAO,UAAWE,KAAM,QACvCH,OACG,gCACA,6CACA,gCACA,+CACHC,MAAO,8CACPD,OACG,yCACA,4CACA,0CACHC,MAAO,mBACPD,OACG,yCACA,4CACA,0CACHC,MAAO,mBACPD,OACG,yCACA,4CACA,0CACHC,MAAO,mBACPD,OACG,yCACA,4CACA,0CACHC,MAAO,mBACPD,OACG,yCACA,4CACA,0CACHC,MAAO,mBACPD,OACG,yCACA,4CACA,0CACHC,MAAO,mBACPD,OACG,wCACA,4CACA,yCACHC,MAAO,mBACPD,OACG,yCACA,4CACA,0CACHC,MAAO,mBACPD,OACG,0CACA,4CACA,2CACHC,MAAO,kBACPD,OACG,0CACA,4CACA,2CACHC,MAAO,sBACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,8CACA,4CACA,+CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,OACG,0CACA,4CACA,2CACHC,MAAO,0BACPD,MAAO,iCACPC,MAAO,sBACPD,MAAO,0CACPC,MAAO,WACjB2B,8BACK5B,MAAO,8CACPC,MAAO,MACPC,OACKF,MAAO,4CACPC,MAAO,MACPE,KAAM,QACNL,QAAS,qBACTM,aAAc,oCACxByB,sBACK7B,OACG,+BACA,6CACA,+BACA,0CACA,+BACA,iDACA,+BACA,kDACA,+BACA,2CACHC,MAAO,kFACPC,OACKF,OACG,iDACA,+BACA,+CACA,+BACA,4CACHC,MAAO,8BACPE,KAAM,QACNL,QAAS,0BACTM,aAAc,mCACxB0B,kBACK9B,OACG,iCACA,2BACA,uCACA,2BACA,4CACA,2BACA,+BACHC,MAAO,yFACPD,OACG,iCACA,2BACA,wCACHC,MAAO,yCACPC,OACKF,MAAO,iDACPC,MAAO,MACPE,KAAM,QACNL,QAAS,0BACTM,aAAc,+BACxB2B,YACK/B,MAAO,6CACPC,MAAO,IACPC,OACKF,MAAO,2CACPC,MAAO,IACPE,KAAM,QACNH,OACG,uCACA,mCACA,uCACA,mCACA,oCACHC,MAAO,6DACPD,MAAO,gCAAiCC,MAAO,eAC/CD,OACG,4CACA,iDACA,oCACA,iDACA,iDACA,oCACA,iDACA,iDACA,iDACA,oCACA,qCACHC,MAAO,4GACPD,OACG,4CACA,iDACA,oCACA,qCACHC,MAAO,6CACPD,MAAO,gCAAiCC,MAAO,QAC/CG,aAAc,kCACxB4B,uBACKhC,MAAO,mCACPC,MAAO,4DACZgC,sBACKjC,MAAO,kCACPC,MAAO,+EACZiC,WACKlC,MAAO,4CACPC,MAAO,MACPC,OACKF,MAAO,0CACPC,MAAO,MACPE,KAAM,QACNH,MAAO,qCAAsCC,MAAO,MACpDH,QAAS,qBACTM,aAAc,kCACxB+B,cACKnC,OAAS,wBAAyB,oCAClCC,MAAO,+CAEdN,KAAKyC,iBAGT1C,GAAqB2C,UAAaC,QAAS,qTACrCC,WAAa,MAAO,OACpBC,cAAe,MACfC,KAAM,SACNC,UAAW,iBAGjBlD,EAAImD,SAASjD,EAAsBD,GAEnCL,EAAQM,qBAAuBA,IAG/BL,IAAIC,OAAO,2BAA2B,UAAU,UAAU,SAAS,cAAc,YAAY,8BAA+B,SAASC,EAAUH,EAASD,GACxJ,YAEA,IAAIK,GAAMD,EAAS,iBACfqD,EAAQrD,EAAS,eAAeqD,MAChCC,EAAetD,EAAS,eAAeuD,SAEvCA,EAAW1D,EAAQ0D,SAAW,SAASC,GACnCA,IACApD,KAAKqD,mBAAqB,GAAIC,QAC1BtD,KAAKqD,mBAAmBE,OAAOC,QAAQ,YAAa,IAAMJ,EAAalD,QAE3EF,KAAKyD,kBAAoB,GAAIH,QACzBtD,KAAKyD,kBAAkBF,OAAOC,QAAQ,YAAa,IAAMJ,EAAaM,OAIlF7D,GAAImD,SAASG,EAAUD,GAEvB,WAEIlD,KAAKqD,mBAAqB,8BAC1BrD,KAAKyD,kBAAoB,kCACzBzD,KAAK2D,yBAA0B,uBAC/B3D,KAAK4D,yBAA2B,2BAChC5D,KAAK6D,cAAgB,4BACrB7D,KAAK8D,mBAAqB9D,KAAK+D,cAC/B/D,KAAK+D,cAAgB,SAASC,EAASC,EAAWC,GAC9C,GAAIC,GAAOH,EAAQI,QAAQF,EAE3B,IAAIlE,KAAK2D,yBAAyBU,KAAKF,KAC9BnE,KAAK6D,cAAcQ,KAAKF,KAAUnE,KAAK4D,yBAAyBS,KAAKF,GACtE,MAAO,EAGf,IAAIG,GAAKtE,KAAK8D,mBAAmBE,EAASC,EAAWC,EAErD,QAAKI,GAAMtE,KAAK6D,cAAcQ,KAAKF,GACxB,QAEJG,GAGXtE,KAAKuE,mBAAqB,SAASP,EAASC,EAAWC,EAAKM,GACxD,GAAIL,GAAOH,EAAQI,QAAQF,EAE3B,IAAIlE,KAAK6D,cAAcQ,KAAKF,GACxB,MAAOnE,MAAKyE,sBAAsBT,EAASG,EAAMD,EAErD,IAAIQ,GAAQP,EAAKO,MAAM1E,KAAKqD,mBAC5B,IAAIqB,EAAO,CACP,GAAIC,GAAID,EAAME,KAEd,IAAIF,EAAM,GACN,MAAO1E,MAAK6E,oBAAoBb,EAASU,EAAM,GAAIR,EAAKS,EAE5D,IAAIG,GAAQd,EAAQe,oBAAoBb,EAAKS,EAAID,EAAM,GAAGM,OAAQ,EASlE,OAPIF,KAAUA,EAAMG,gBACZT,EACAM,EAAQ9E,KAAKkF,gBAAgBlB,EAASE,GAClB,OAAbD,IACPa,EAAQ,OAGTA,EAGX,GAAkB,cAAdb,EAAJ,CAGA,GAAIS,GAAQP,EAAKO,MAAM1E,KAAKyD,kBAC5B,IAAIiB,EAAO,CACP,GAAIC,GAAID,EAAME,MAAQF,EAAM,GAAGM,MAE/B,OAAIN,GAAM,GACC1E,KAAKmF,oBAAoBnB,EAASU,EAAM,GAAIR,EAAKS,GAErDX,EAAQe,oBAAoBb,EAAKS,GAAI,MAIpD3E,KAAKkF,gBAAkB,SAASlB,EAASE,GACrC,GAAIC,GAAOH,EAAQI,QAAQF,GACvBkB,EAAcjB,EAAKkB,OAAO,MAC1BC,EAAWpB,EACXqB,EAAcpB,EAAKa,MACvBd,IAAY,CAGZ,KAFA,GAAIsB,GAAStB,EACTuB,EAASzB,EAAQ0B,cACZxB,EAAMuB,GAAQ,CACnBtB,EAAOH,EAAQI,QAAQF,EACvB,IAAIyB,GAASxB,EAAKkB,OAAO,KACzB,KAAgB,IAAZM,EAAJ,CAEA,GAAKP,EAAcO,EACf,KACJ,IAAIC,GAAW5F,KAAKuE,mBAAmBP,EAAS,MAAOE,EAEvD,IAAI0B,EAAU,CACV,GAAIA,EAAS1F,MAAMgE,KAAOoB,EACtB,KACG,IAAIM,EAASX,cAChBf,EAAM0B,EAASlC,IAAIQ,QAChB,IAAIkB,GAAeO,EACtB,MAGRH,EAAStB,GAGb,MAAO,IAAIjB,GAAMqC,EAAUC,EAAaC,EAAQxB,EAAQI,QAAQoB,GAAQR,SAE5EhF,KAAKyE,sBAAwB,SAAST,EAASG,EAAMD,GAOjD,IANA,GAAIqB,GAAcpB,EAAKkB,OAAO,QAC1BI,EAASzB,EAAQ0B,YACjBJ,EAAWpB,EAEX2B,EAAK,uCACLC,EAAQ,IACH5B,EAAMuB,GAAQ,CACnBtB,EAAOH,EAAQI,QAAQF,EACvB,IAAI6B,GAAIF,EAAGG,KAAK7B,EAChB,IAAK4B,IACDA,EAAE,GAAID,IACLA,KAEAA,GAAO,MAGhB,GAAIN,GAAStB,CACb,IAAIsB,EAASF,EACT,MAAO,IAAIrC,GAAMqC,EAAUC,EAAaC,EAAQrB,EAAKa,UAI9DiB,KAAK9C,EAAS+C,aAIjBxG,IAAIC,OAAO,mBAAmB,UAAU,UAAU,SAAS,cAAc,gBAAgB,kCAAkC,2BAA4B,SAASC,EAAUH,EAASD,GACnL,YAEA,IAAIK,GAAMD,EAAS,cACfuG,EAAWvG,EAAS,UAAUwG,KAC9BrG,EAAuBH,EAAS,4BAA4BG,qBAC5DoD,EAAWvD,EAAS,oBAAoBuD,SAExCiD,EAAO,WACPpG,KAAKqG,eAAiBtG,EACtBC,KAAKsG,aAAe,GAAInD,GACxBnD,KAAKuG,WAAavG,KAAKwG,kBAE3B3G,GAAImD,SAASoD,EAAMD,GAEnB,WACInG,KAAKyG,iBAAmB,IACxBzG,KAAK0G,aAAe,KACpB1G,KAAK2G,IAAM,mBACZV,KAAKG,EAAKF,WAEbzG,EAAQ2G,KAAOA","file":"vendor/brace/mode/erlang.chunk.js","sourcesContent":["webpackJsonppanneau([196],{\n\n/***/ 246:\n/***/ (function(module, exports) {\n\nace.define(\"ace/mode/erlang_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"],function(acequire,exports,module){\"use strict\";var oop=acequire(\"../lib/oop\");var TextHighlightRules=acequire(\"./text_highlight_rules\").TextHighlightRules;var ErlangHighlightRules=function ErlangHighlightRules(){this.$rules={start:[{include:'#module-directive'},{include:'#import-export-directive'},{include:'#behaviour-directive'},{include:'#record-directive'},{include:'#define-directive'},{include:'#macro-directive'},{include:'#directive'},{include:'#function'},{include:'#everything-else'}],'#atom':[{token:'punctuation.definition.symbol.begin.erlang',regex:'\\'',push:[{token:'punctuation.definition.symbol.end.erlang',regex:'\\'',next:'pop'},{token:['punctuation.definition.escape.erlang','constant.other.symbol.escape.erlang','punctuation.definition.escape.erlang','constant.other.symbol.escape.erlang','constant.other.symbol.escape.erlang'],regex:'(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))'},{token:'invalid.illegal.atom.erlang',regex:'\\\\\\\\\\\\^?.?'},{defaultToken:'constant.other.symbol.quoted.single.erlang'}]},{token:'constant.other.symbol.unquoted.erlang',regex:'[a-z][a-zA-Z\\\\d@_]*'}],'#behaviour-directive':[{token:['meta.directive.behaviour.erlang','punctuation.section.directive.begin.erlang','meta.directive.behaviour.erlang','keyword.control.directive.behaviour.erlang','meta.directive.behaviour.erlang','punctuation.definition.parameters.begin.erlang','meta.directive.behaviour.erlang','entity.name.type.class.behaviour.definition.erlang','meta.directive.behaviour.erlang','punctuation.definition.parameters.end.erlang','meta.directive.behaviour.erlang','punctuation.section.directive.end.erlang'],regex:'^(\\\\s*)(-)(\\\\s*)(behaviour)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'}],'#binary':[{token:'punctuation.definition.binary.begin.erlang',regex:'<<',push:[{token:'punctuation.definition.binary.end.erlang',regex:'>>',next:'pop'},{token:['punctuation.separator.binary.erlang','punctuation.separator.value-size.erlang'],regex:'(,)|(:)'},{include:'#internal-type-specifiers'},{include:'#everything-else'},{defaultToken:'meta.structure.binary.erlang'}]}],'#character':[{token:['punctuation.definition.character.erlang','punctuation.definition.escape.erlang','constant.character.escape.erlang','punctuation.definition.escape.erlang','constant.character.escape.erlang','constant.character.escape.erlang'],regex:'(\\\\$)(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))'},{token:'invalid.illegal.character.erlang',regex:'\\\\$\\\\\\\\\\\\^?.?'},{token:['punctuation.definition.character.erlang','constant.character.erlang'],regex:'(\\\\$)(\\\\S)'},{token:'invalid.illegal.character.erlang',regex:'\\\\$.?'}],'#comment':[{token:'punctuation.definition.comment.erlang',regex:'%.*$',push_:[{token:'comment.line.percentage.erlang',regex:'$',next:'pop'},{defaultToken:'comment.line.percentage.erlang'}]}],'#define-directive':[{token:['meta.directive.define.erlang','punctuation.section.directive.begin.erlang','meta.directive.define.erlang','keyword.control.directive.define.erlang','meta.directive.define.erlang','punctuation.definition.parameters.begin.erlang','meta.directive.define.erlang','entity.name.function.macro.definition.erlang','meta.directive.define.erlang','punctuation.separator.parameters.erlang'],regex:'^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(,)',push:[{token:['punctuation.definition.parameters.end.erlang','meta.directive.define.erlang','punctuation.section.directive.end.erlang'],regex:'(\\\\))(\\\\s*)(\\\\.)',next:'pop'},{include:'#everything-else'},{defaultToken:'meta.directive.define.erlang'}]},{token:'meta.directive.define.erlang',regex:'(?=^\\\\s*-\\\\s*define\\\\s*\\\\(\\\\s*[a-zA-Z\\\\d@_]+\\\\s*\\\\()',push:[{token:['punctuation.definition.parameters.end.erlang','meta.directive.define.erlang','punctuation.section.directive.end.erlang'],regex:'(\\\\))(\\\\s*)(\\\\.)',next:'pop'},{token:['text','punctuation.section.directive.begin.erlang','text','keyword.control.directive.define.erlang','text','punctuation.definition.parameters.begin.erlang','text','entity.name.function.macro.definition.erlang','text','punctuation.definition.parameters.begin.erlang'],regex:'^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\()',push:[{token:['punctuation.definition.parameters.end.erlang','text','punctuation.separator.parameters.erlang'],regex:'(\\\\))(\\\\s*)(,)',next:'pop'},{token:'punctuation.separator.parameters.erlang',regex:','},{include:'#everything-else'}]},{token:'punctuation.separator.define.erlang',regex:'\\\\|\\\\||\\\\||:|;|,|\\\\.|->'},{include:'#everything-else'},{defaultToken:'meta.directive.define.erlang'}]}],'#directive':[{token:['meta.directive.erlang','punctuation.section.directive.begin.erlang','meta.directive.erlang','keyword.control.directive.erlang','meta.directive.erlang','punctuation.definition.parameters.begin.erlang'],regex:'^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\(?)',push:[{token:['punctuation.definition.parameters.end.erlang','meta.directive.erlang','punctuation.section.directive.end.erlang'],regex:'(\\\\)?)(\\\\s*)(\\\\.)',next:'pop'},{include:'#everything-else'},{defaultToken:'meta.directive.erlang'}]},{token:['meta.directive.erlang','punctuation.section.directive.begin.erlang','meta.directive.erlang','keyword.control.directive.erlang','meta.directive.erlang','punctuation.section.directive.end.erlang'],regex:'^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\.)'}],'#everything-else':[{include:'#comment'},{include:'#record-usage'},{include:'#macro-usage'},{include:'#expression'},{include:'#keyword'},{include:'#textual-operator'},{include:'#function-call'},{include:'#tuple'},{include:'#list'},{include:'#binary'},{include:'#parenthesized-expression'},{include:'#character'},{include:'#number'},{include:'#atom'},{include:'#string'},{include:'#symbolic-operator'},{include:'#variable'}],'#expression':[{token:'keyword.control.if.erlang',regex:'\\\\bif\\\\b',push:[{token:'keyword.control.end.erlang',regex:'\\\\bend\\\\b',next:'pop'},{include:'#internal-expression-punctuation'},{include:'#everything-else'},{defaultToken:'meta.expression.if.erlang'}]},{token:'keyword.control.case.erlang',regex:'\\\\bcase\\\\b',push:[{token:'keyword.control.end.erlang',regex:'\\\\bend\\\\b',next:'pop'},{include:'#internal-expression-punctuation'},{include:'#everything-else'},{defaultToken:'meta.expression.case.erlang'}]},{token:'keyword.control.receive.erlang',regex:'\\\\breceive\\\\b',push:[{token:'keyword.control.end.erlang',regex:'\\\\bend\\\\b',next:'pop'},{include:'#internal-expression-punctuation'},{include:'#everything-else'},{defaultToken:'meta.expression.receive.erlang'}]},{token:['keyword.control.fun.erlang','text','entity.name.type.class.module.erlang','text','punctuation.separator.module-function.erlang','text','entity.name.function.erlang','text','punctuation.separator.function-arity.erlang'],regex:'\\\\b(fun)(\\\\s*)(?:([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(/)'},{token:'keyword.control.fun.erlang',regex:'\\\\bfun\\\\b',push:[{token:'keyword.control.end.erlang',regex:'\\\\bend\\\\b',next:'pop'},{token:'text',regex:'(?=\\\\()',push:[{token:'punctuation.separator.clauses.erlang',regex:';|(?=\\\\bend\\\\b)',next:'pop'},{include:'#internal-function-parts'}]},{include:'#everything-else'},{defaultToken:'meta.expression.fun.erlang'}]},{token:'keyword.control.try.erlang',regex:'\\\\btry\\\\b',push:[{token:'keyword.control.end.erlang',regex:'\\\\bend\\\\b',next:'pop'},{include:'#internal-expression-punctuation'},{include:'#everything-else'},{defaultToken:'meta.expression.try.erlang'}]},{token:'keyword.control.begin.erlang',regex:'\\\\bbegin\\\\b',push:[{token:'keyword.control.end.erlang',regex:'\\\\bend\\\\b',next:'pop'},{include:'#internal-expression-punctuation'},{include:'#everything-else'},{defaultToken:'meta.expression.begin.erlang'}]},{token:'keyword.control.query.erlang',regex:'\\\\bquery\\\\b',push:[{token:'keyword.control.end.erlang',regex:'\\\\bend\\\\b',next:'pop'},{include:'#everything-else'},{defaultToken:'meta.expression.query.erlang'}]}],'#function':[{token:['meta.function.erlang','entity.name.function.definition.erlang','meta.function.erlang'],regex:'^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()',push:[{token:'punctuation.terminator.function.erlang',regex:'\\\\.',next:'pop'},{token:['text','entity.name.function.erlang','text'],regex:'^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()'},{token:'text',regex:'(?=\\\\()',push:[{token:'punctuation.separator.clauses.erlang',regex:';|(?=\\\\.)',next:'pop'},{include:'#parenthesized-expression'},{include:'#internal-function-parts'}]},{include:'#everything-else'},{defaultToken:'meta.function.erlang'}]}],'#function-call':[{token:'meta.function-call.erlang',regex:'(?=(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*(?:\\\\(|:\\\\s*(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*\\\\())',push:[{token:'punctuation.definition.parameters.end.erlang',regex:'\\\\)',next:'pop'},{token:['entity.name.type.class.module.erlang','text','punctuation.separator.module-function.erlang','text','entity.name.function.guard.erlang','text','punctuation.definition.parameters.begin.erlang'],regex:'(?:(erlang)(\\\\s*)(:)(\\\\s*))?(is_atom|is_binary|is_constant|is_float|is_function|is_integer|is_list|is_number|is_pid|is_port|is_reference|is_tuple|is_record|abs|element|hd|length|node|round|self|size|tl|trunc)(\\\\s*)(\\\\()',push:[{token:'text',regex:'(?=\\\\))',next:'pop'},{token:'punctuation.separator.parameters.erlang',regex:','},{include:'#everything-else'}]},{token:['entity.name.type.class.module.erlang','text','punctuation.separator.module-function.erlang','text','entity.name.function.erlang','text','punctuation.definition.parameters.begin.erlang'],regex:'(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\()',push:[{token:'text',regex:'(?=\\\\))',next:'pop'},{token:'punctuation.separator.parameters.erlang',regex:','},{include:'#everything-else'}]},{defaultToken:'meta.function-call.erlang'}]}],'#import-export-directive':[{token:['meta.directive.import.erlang','punctuation.section.directive.begin.erlang','meta.directive.import.erlang','keyword.control.directive.import.erlang','meta.directive.import.erlang','punctuation.definition.parameters.begin.erlang','meta.directive.import.erlang','entity.name.type.class.module.erlang','meta.directive.import.erlang','punctuation.separator.parameters.erlang'],regex:'^(\\\\s*)(-)(\\\\s*)(import)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',push:[{token:['punctuation.definition.parameters.end.erlang','meta.directive.import.erlang','punctuation.section.directive.end.erlang'],regex:'(\\\\))(\\\\s*)(\\\\.)',next:'pop'},{include:'#internal-function-list'},{defaultToken:'meta.directive.import.erlang'}]},{token:['meta.directive.export.erlang','punctuation.section.directive.begin.erlang','meta.directive.export.erlang','keyword.control.directive.export.erlang','meta.directive.export.erlang','punctuation.definition.parameters.begin.erlang'],regex:'^(\\\\s*)(-)(\\\\s*)(export)(\\\\s*)(\\\\()',push:[{token:['punctuation.definition.parameters.end.erlang','meta.directive.export.erlang','punctuation.section.directive.end.erlang'],regex:'(\\\\))(\\\\s*)(\\\\.)',next:'pop'},{include:'#internal-function-list'},{defaultToken:'meta.directive.export.erlang'}]}],'#internal-expression-punctuation':[{token:['punctuation.separator.clause-head-body.erlang','punctuation.separator.clauses.erlang','punctuation.separator.expressions.erlang'],regex:'(->)|(;)|(,)'}],'#internal-function-list':[{token:'punctuation.definition.list.begin.erlang',regex:'\\\\[',push:[{token:'punctuation.definition.list.end.erlang',regex:'\\\\]',next:'pop'},{token:['entity.name.function.erlang','text','punctuation.separator.function-arity.erlang'],regex:'([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(/)',push:[{token:'punctuation.separator.list.erlang',regex:',|(?=\\\\])',next:'pop'},{include:'#everything-else'}]},{include:'#everything-else'},{defaultToken:'meta.structure.list.function.erlang'}]}],'#internal-function-parts':[{token:'text',regex:'(?=\\\\()',push:[{token:'punctuation.separator.clause-head-body.erlang',regex:'->',next:'pop'},{token:'punctuation.definition.parameters.begin.erlang',regex:'\\\\(',push:[{token:'punctuation.definition.parameters.end.erlang',regex:'\\\\)',next:'pop'},{token:'punctuation.separator.parameters.erlang',regex:','},{include:'#everything-else'}]},{token:'punctuation.separator.guards.erlang',regex:',|;'},{include:'#everything-else'}]},{token:'punctuation.separator.expressions.erlang',regex:','},{include:'#everything-else'}],'#internal-record-body':[{token:'punctuation.definition.class.record.begin.erlang',regex:'\\\\{',push:[{token:'meta.structure.record.erlang',regex:'(?=\\\\})',next:'pop'},{token:['variable.other.field.erlang','variable.language.omitted.field.erlang','text','keyword.operator.assignment.erlang'],regex:'(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')|(_))(\\\\s*)(=|::)',push:[{token:'punctuation.separator.class.record.erlang',regex:',|(?=\\\\})',next:'pop'},{include:'#everything-else'}]},{token:['variable.other.field.erlang','text','punctuation.separator.class.record.erlang'],regex:'([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)((?:,)?)'},{include:'#everything-else'},{defaultToken:'meta.structure.record.erlang'}]}],'#internal-type-specifiers':[{token:'punctuation.separator.value-type.erlang',regex:'/',push:[{token:'text',regex:'(?=,|:|>>)',next:'pop'},{token:['storage.type.erlang','storage.modifier.signedness.erlang','storage.modifier.endianness.erlang','storage.modifier.unit.erlang','punctuation.separator.type-specifiers.erlang'],regex:'(integer|float|binary|bytes|bitstring|bits)|(signed|unsigned)|(big|little|native)|(unit)|(-)'}]}],'#keyword':[{token:'keyword.control.erlang',regex:'\\\\b(?:after|begin|case|catch|cond|end|fun|if|let|of|query|try|receive|when)\\\\b'}],'#list':[{token:'punctuation.definition.list.begin.erlang',regex:'\\\\[',push:[{token:'punctuation.definition.list.end.erlang',regex:'\\\\]',next:'pop'},{token:'punctuation.separator.list.erlang',regex:'\\\\||\\\\|\\\\||,'},{include:'#everything-else'},{defaultToken:'meta.structure.list.erlang'}]}],'#macro-directive':[{token:['meta.directive.ifdef.erlang','punctuation.section.directive.begin.erlang','meta.directive.ifdef.erlang','keyword.control.directive.ifdef.erlang','meta.directive.ifdef.erlang','punctuation.definition.parameters.begin.erlang','meta.directive.ifdef.erlang','entity.name.function.macro.erlang','meta.directive.ifdef.erlang','punctuation.definition.parameters.end.erlang','meta.directive.ifdef.erlang','punctuation.section.directive.end.erlang'],regex:'^(\\\\s*)(-)(\\\\s*)(ifdef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'},{token:['meta.directive.ifndef.erlang','punctuation.section.directive.begin.erlang','meta.directive.ifndef.erlang','keyword.control.directive.ifndef.erlang','meta.directive.ifndef.erlang','punctuation.definition.parameters.begin.erlang','meta.directive.ifndef.erlang','entity.name.function.macro.erlang','meta.directive.ifndef.erlang','punctuation.definition.parameters.end.erlang','meta.directive.ifndef.erlang','punctuation.section.directive.end.erlang'],regex:'^(\\\\s*)(-)(\\\\s*)(ifndef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'},{token:['meta.directive.undef.erlang','punctuation.section.directive.begin.erlang','meta.directive.undef.erlang','keyword.control.directive.undef.erlang','meta.directive.undef.erlang','punctuation.definition.parameters.begin.erlang','meta.directive.undef.erlang','entity.name.function.macro.erlang','meta.directive.undef.erlang','punctuation.definition.parameters.end.erlang','meta.directive.undef.erlang','punctuation.section.directive.end.erlang'],regex:'^(\\\\s*)(-)(\\\\s*)(undef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'}],'#macro-usage':[{token:['keyword.operator.macro.erlang','meta.macro-usage.erlang','entity.name.function.macro.erlang'],regex:'(\\\\?\\\\??)(\\\\s*)([a-zA-Z\\\\d@_]+)'}],'#module-directive':[{token:['meta.directive.module.erlang','punctuation.section.directive.begin.erlang','meta.directive.module.erlang','keyword.control.directive.module.erlang','meta.directive.module.erlang','punctuation.definition.parameters.begin.erlang','meta.directive.module.erlang','entity.name.type.class.module.definition.erlang','meta.directive.module.erlang','punctuation.definition.parameters.end.erlang','meta.directive.module.erlang','punctuation.section.directive.end.erlang'],regex:'^(\\\\s*)(-)(\\\\s*)(module)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)'}],'#number':[{token:'text',regex:'(?=\\\\d)',push:[{token:'text',regex:'(?!\\\\d)',next:'pop'},{token:['constant.numeric.float.erlang','punctuation.separator.integer-float.erlang','constant.numeric.float.erlang','punctuation.separator.float-exponent.erlang'],regex:'(\\\\d+)(\\\\.)(\\\\d+)((?:[eE][\\\\+\\\\-]?\\\\d+)?)'},{token:['constant.numeric.integer.binary.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.binary.erlang'],regex:'(2)(#)([0-1]+)'},{token:['constant.numeric.integer.base-3.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-3.erlang'],regex:'(3)(#)([0-2]+)'},{token:['constant.numeric.integer.base-4.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-4.erlang'],regex:'(4)(#)([0-3]+)'},{token:['constant.numeric.integer.base-5.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-5.erlang'],regex:'(5)(#)([0-4]+)'},{token:['constant.numeric.integer.base-6.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-6.erlang'],regex:'(6)(#)([0-5]+)'},{token:['constant.numeric.integer.base-7.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-7.erlang'],regex:'(7)(#)([0-6]+)'},{token:['constant.numeric.integer.octal.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.octal.erlang'],regex:'(8)(#)([0-7]+)'},{token:['constant.numeric.integer.base-9.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-9.erlang'],regex:'(9)(#)([0-8]+)'},{token:['constant.numeric.integer.decimal.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.decimal.erlang'],regex:'(10)(#)(\\\\d+)'},{token:['constant.numeric.integer.base-11.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-11.erlang'],regex:'(11)(#)([\\\\daA]+)'},{token:['constant.numeric.integer.base-12.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-12.erlang'],regex:'(12)(#)([\\\\da-bA-B]+)'},{token:['constant.numeric.integer.base-13.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-13.erlang'],regex:'(13)(#)([\\\\da-cA-C]+)'},{token:['constant.numeric.integer.base-14.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-14.erlang'],regex:'(14)(#)([\\\\da-dA-D]+)'},{token:['constant.numeric.integer.base-15.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-15.erlang'],regex:'(15)(#)([\\\\da-eA-E]+)'},{token:['constant.numeric.integer.hexadecimal.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.hexadecimal.erlang'],regex:'(16)(#)([\\\\da-fA-F]+)'},{token:['constant.numeric.integer.base-17.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-17.erlang'],regex:'(17)(#)([\\\\da-gA-G]+)'},{token:['constant.numeric.integer.base-18.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-18.erlang'],regex:'(18)(#)([\\\\da-hA-H]+)'},{token:['constant.numeric.integer.base-19.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-19.erlang'],regex:'(19)(#)([\\\\da-iA-I]+)'},{token:['constant.numeric.integer.base-20.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-20.erlang'],regex:'(20)(#)([\\\\da-jA-J]+)'},{token:['constant.numeric.integer.base-21.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-21.erlang'],regex:'(21)(#)([\\\\da-kA-K]+)'},{token:['constant.numeric.integer.base-22.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-22.erlang'],regex:'(22)(#)([\\\\da-lA-L]+)'},{token:['constant.numeric.integer.base-23.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-23.erlang'],regex:'(23)(#)([\\\\da-mA-M]+)'},{token:['constant.numeric.integer.base-24.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-24.erlang'],regex:'(24)(#)([\\\\da-nA-N]+)'},{token:['constant.numeric.integer.base-25.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-25.erlang'],regex:'(25)(#)([\\\\da-oA-O]+)'},{token:['constant.numeric.integer.base-26.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-26.erlang'],regex:'(26)(#)([\\\\da-pA-P]+)'},{token:['constant.numeric.integer.base-27.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-27.erlang'],regex:'(27)(#)([\\\\da-qA-Q]+)'},{token:['constant.numeric.integer.base-28.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-28.erlang'],regex:'(28)(#)([\\\\da-rA-R]+)'},{token:['constant.numeric.integer.base-29.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-29.erlang'],regex:'(29)(#)([\\\\da-sA-S]+)'},{token:['constant.numeric.integer.base-30.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-30.erlang'],regex:'(30)(#)([\\\\da-tA-T]+)'},{token:['constant.numeric.integer.base-31.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-31.erlang'],regex:'(31)(#)([\\\\da-uA-U]+)'},{token:['constant.numeric.integer.base-32.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-32.erlang'],regex:'(32)(#)([\\\\da-vA-V]+)'},{token:['constant.numeric.integer.base-33.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-33.erlang'],regex:'(33)(#)([\\\\da-wA-W]+)'},{token:['constant.numeric.integer.base-34.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-34.erlang'],regex:'(34)(#)([\\\\da-xA-X]+)'},{token:['constant.numeric.integer.base-35.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-35.erlang'],regex:'(35)(#)([\\\\da-yA-Y]+)'},{token:['constant.numeric.integer.base-36.erlang','punctuation.separator.base-integer.erlang','constant.numeric.integer.base-36.erlang'],regex:'(36)(#)([\\\\da-zA-Z]+)'},{token:'invalid.illegal.integer.erlang',regex:'\\\\d+#[\\\\da-zA-Z]+'},{token:'constant.numeric.integer.decimal.erlang',regex:'\\\\d+'}]}],'#parenthesized-expression':[{token:'punctuation.section.expression.begin.erlang',regex:'\\\\(',push:[{token:'punctuation.section.expression.end.erlang',regex:'\\\\)',next:'pop'},{include:'#everything-else'},{defaultToken:'meta.expression.parenthesized'}]}],'#record-directive':[{token:['meta.directive.record.erlang','punctuation.section.directive.begin.erlang','meta.directive.record.erlang','keyword.control.directive.import.erlang','meta.directive.record.erlang','punctuation.definition.parameters.begin.erlang','meta.directive.record.erlang','entity.name.type.class.record.definition.erlang','meta.directive.record.erlang','punctuation.separator.parameters.erlang'],regex:'^(\\\\s*)(-)(\\\\s*)(record)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',push:[{token:['punctuation.definition.class.record.end.erlang','meta.directive.record.erlang','punctuation.definition.parameters.end.erlang','meta.directive.record.erlang','punctuation.section.directive.end.erlang'],regex:'(\\\\})(\\\\s*)(\\\\))(\\\\s*)(\\\\.)',next:'pop'},{include:'#internal-record-body'},{defaultToken:'meta.directive.record.erlang'}]}],'#record-usage':[{token:['keyword.operator.record.erlang','meta.record-usage.erlang','entity.name.type.class.record.erlang','meta.record-usage.erlang','punctuation.separator.record-field.erlang','meta.record-usage.erlang','variable.other.field.erlang'],regex:'(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\.)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')'},{token:['keyword.operator.record.erlang','meta.record-usage.erlang','entity.name.type.class.record.erlang'],regex:'(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')',push:[{token:'punctuation.definition.class.record.end.erlang',regex:'\\\\}',next:'pop'},{include:'#internal-record-body'},{defaultToken:'meta.record-usage.erlang'}]}],'#string':[{token:'punctuation.definition.string.begin.erlang',regex:'\"',push:[{token:'punctuation.definition.string.end.erlang',regex:'\"',next:'pop'},{token:['punctuation.definition.escape.erlang','constant.character.escape.erlang','punctuation.definition.escape.erlang','constant.character.escape.erlang','constant.character.escape.erlang'],regex:'(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))'},{token:'invalid.illegal.string.erlang',regex:'\\\\\\\\\\\\^?.?'},{token:['punctuation.definition.placeholder.erlang','punctuation.separator.placeholder-parts.erlang','constant.other.placeholder.erlang','punctuation.separator.placeholder-parts.erlang','punctuation.separator.placeholder-parts.erlang','constant.other.placeholder.erlang','punctuation.separator.placeholder-parts.erlang','punctuation.separator.placeholder-parts.erlang','punctuation.separator.placeholder-parts.erlang','constant.other.placeholder.erlang','constant.other.placeholder.erlang'],regex:'(~)(?:((?:\\\\-)?)(\\\\d+)|(\\\\*))?(?:(\\\\.)(?:(\\\\d+)|(\\\\*)))?(?:(\\\\.)(?:(\\\\*)|(.)))?([~cfegswpWPBX#bx\\\\+ni])'},{token:['punctuation.definition.placeholder.erlang','punctuation.separator.placeholder-parts.erlang','constant.other.placeholder.erlang','constant.other.placeholder.erlang'],regex:'(~)((?:\\\\*)?)((?:\\\\d+)?)([~du\\\\-#fsacl])'},{token:'invalid.illegal.string.erlang',regex:'~.?'},{defaultToken:'string.quoted.double.erlang'}]}],'#symbolic-operator':[{token:'keyword.operator.symbolic.erlang',regex:'\\\\+\\\\+|\\\\+|--|-|\\\\*|/=|/|=/=|=:=|==|=<|=|<-|<|>=|>|!|::'}],'#textual-operator':[{token:'keyword.operator.textual.erlang',regex:'\\\\b(?:andalso|band|and|bxor|xor|bor|orelse|or|bnot|not|bsl|bsr|div|rem)\\\\b'}],'#tuple':[{token:'punctuation.definition.tuple.begin.erlang',regex:'\\\\{',push:[{token:'punctuation.definition.tuple.end.erlang',regex:'\\\\}',next:'pop'},{token:'punctuation.separator.tuple.erlang',regex:','},{include:'#everything-else'},{defaultToken:'meta.structure.tuple.erlang'}]}],'#variable':[{token:['variable.other.erlang','variable.language.omitted.erlang'],regex:'(_[a-zA-Z\\\\d@_]+|[A-Z][a-zA-Z\\\\d@_]*)|(_)'}]};this.normalizeRules();};ErlangHighlightRules.metaData={comment:'The recognition of function definitions and compiler directives (such as module, record and macro definitions) acequires that each of the aforementioned constructs must be the first string inside a line (except for whitespace).  Also, the function/module/record/macro names must be given unquoted.  -- desp',fileTypes:['erl','hrl'],keyEquivalent:'^~E',name:'Erlang',scopeName:'source.erlang'};oop.inherits(ErlangHighlightRules,TextHighlightRules);exports.ErlangHighlightRules=ErlangHighlightRules;});ace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"],function(acequire,exports,module){\"use strict\";var oop=acequire(\"../../lib/oop\");var Range=acequire(\"../../range\").Range;var BaseFoldMode=acequire(\"./fold_mode\").FoldMode;var FoldMode=exports.FoldMode=function(commentRegex){if(commentRegex){this.foldingStartMarker=new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/,\"|\"+commentRegex.start));this.foldingStopMarker=new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/,\"|\"+commentRegex.end));}};oop.inherits(FoldMode,BaseFoldMode);(function(){this.foldingStartMarker=/(\\{|\\[)[^\\}\\]]*$|^\\s*(\\/\\*)/;this.foldingStopMarker=/^[^\\[\\{]*(\\}|\\])|^[\\s\\*]*(\\*\\/)/;this.singleLineBlockCommentRe=/^\\s*(\\/\\*).*\\*\\/\\s*$/;this.tripleStarBlockCommentRe=/^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;this.startRegionRe=/^\\s*(\\/\\*|\\/\\/)#?region\\b/;this._getFoldWidgetBase=this.getFoldWidget;this.getFoldWidget=function(session,foldStyle,row){var line=session.getLine(row);if(this.singleLineBlockCommentRe.test(line)){if(!this.startRegionRe.test(line)&&!this.tripleStarBlockCommentRe.test(line))return\"\";}var fw=this._getFoldWidgetBase(session,foldStyle,row);if(!fw&&this.startRegionRe.test(line))return\"start\";// lineCommentRegionStart\nreturn fw;};this.getFoldWidgetRange=function(session,foldStyle,row,forceMultiline){var line=session.getLine(row);if(this.startRegionRe.test(line))return this.getCommentRegionBlock(session,line,row);var match=line.match(this.foldingStartMarker);if(match){var i=match.index;if(match[1])return this.openingBracketBlock(session,match[1],row,i);var range=session.getCommentFoldRange(row,i+match[0].length,1);if(range&&!range.isMultiLine()){if(forceMultiline){range=this.getSectionRange(session,row);}else if(foldStyle!=\"all\")range=null;}return range;}if(foldStyle===\"markbegin\")return;var match=line.match(this.foldingStopMarker);if(match){var i=match.index+match[0].length;if(match[1])return this.closingBracketBlock(session,match[1],row,i);return session.getCommentFoldRange(row,i,-1);}};this.getSectionRange=function(session,row){var line=session.getLine(row);var startIndent=line.search(/\\S/);var startRow=row;var startColumn=line.length;row=row+1;var endRow=row;var maxRow=session.getLength();while(++row<maxRow){line=session.getLine(row);var indent=line.search(/\\S/);if(indent===-1)continue;if(startIndent>indent)break;var subRange=this.getFoldWidgetRange(session,\"all\",row);if(subRange){if(subRange.start.row<=startRow){break;}else if(subRange.isMultiLine()){row=subRange.end.row;}else if(startIndent==indent){break;}}endRow=row;}return new Range(startRow,startColumn,endRow,session.getLine(endRow).length);};this.getCommentRegionBlock=function(session,line,row){var startColumn=line.search(/\\s*$/);var maxRow=session.getLength();var startRow=row;var re=/^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;var depth=1;while(++row<maxRow){line=session.getLine(row);var m=re.exec(line);if(!m)continue;if(m[1])depth--;else depth++;if(!depth)break;}var endRow=row;if(endRow>startRow){return new Range(startRow,startColumn,endRow,line.length);}};}).call(FoldMode.prototype);});ace.define(\"ace/mode/erlang\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/erlang_highlight_rules\",\"ace/mode/folding/cstyle\"],function(acequire,exports,module){\"use strict\";var oop=acequire(\"../lib/oop\");var TextMode=acequire(\"./text\").Mode;var ErlangHighlightRules=acequire(\"./erlang_highlight_rules\").ErlangHighlightRules;var FoldMode=acequire(\"./folding/cstyle\").FoldMode;var Mode=function Mode(){this.HighlightRules=ErlangHighlightRules;this.foldingRules=new FoldMode();this.$behaviour=this.$defaultBehaviour;};oop.inherits(Mode,TextMode);(function(){this.lineCommentStart=\"%\";this.blockComment=null;this.$id=\"ace/mode/erlang\";}).call(Mode.prototype);exports.Mode=Mode;});\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// vendor/brace/mode/erlang.chunk.js","ace.define(\"ace/mode/erlang_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar ErlangHighlightRules = function() {\n\n    this.$rules = { start: \n       [ { include: '#module-directive' },\n         { include: '#import-export-directive' },\n         { include: '#behaviour-directive' },\n         { include: '#record-directive' },\n         { include: '#define-directive' },\n         { include: '#macro-directive' },\n         { include: '#directive' },\n         { include: '#function' },\n         { include: '#everything-else' } ],\n      '#atom': \n       [ { token: 'punctuation.definition.symbol.begin.erlang',\n           regex: '\\'',\n           push: \n            [ { token: 'punctuation.definition.symbol.end.erlang',\n                regex: '\\'',\n                next: 'pop' },\n              { token: \n                 [ 'punctuation.definition.escape.erlang',\n                   'constant.other.symbol.escape.erlang',\n                   'punctuation.definition.escape.erlang',\n                   'constant.other.symbol.escape.erlang',\n                   'constant.other.symbol.escape.erlang' ],\n                regex: '(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))' },\n              { token: 'invalid.illegal.atom.erlang', regex: '\\\\\\\\\\\\^?.?' },\n              { defaultToken: 'constant.other.symbol.quoted.single.erlang' } ] },\n         { token: 'constant.other.symbol.unquoted.erlang',\n           regex: '[a-z][a-zA-Z\\\\d@_]*' } ],\n      '#behaviour-directive': \n       [ { token: \n            [ 'meta.directive.behaviour.erlang',\n              'punctuation.section.directive.begin.erlang',\n              'meta.directive.behaviour.erlang',\n              'keyword.control.directive.behaviour.erlang',\n              'meta.directive.behaviour.erlang',\n              'punctuation.definition.parameters.begin.erlang',\n              'meta.directive.behaviour.erlang',\n              'entity.name.type.class.behaviour.definition.erlang',\n              'meta.directive.behaviour.erlang',\n              'punctuation.definition.parameters.end.erlang',\n              'meta.directive.behaviour.erlang',\n              'punctuation.section.directive.end.erlang' ],\n           regex: '^(\\\\s*)(-)(\\\\s*)(behaviour)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' } ],\n      '#binary': \n       [ { token: 'punctuation.definition.binary.begin.erlang',\n           regex: '<<',\n           push: \n            [ { token: 'punctuation.definition.binary.end.erlang',\n                regex: '>>',\n                next: 'pop' },\n              { token: \n                 [ 'punctuation.separator.binary.erlang',\n                   'punctuation.separator.value-size.erlang' ],\n                regex: '(,)|(:)' },\n              { include: '#internal-type-specifiers' },\n              { include: '#everything-else' },\n              { defaultToken: 'meta.structure.binary.erlang' } ] } ],\n      '#character': \n       [ { token: \n            [ 'punctuation.definition.character.erlang',\n              'punctuation.definition.escape.erlang',\n              'constant.character.escape.erlang',\n              'punctuation.definition.escape.erlang',\n              'constant.character.escape.erlang',\n              'constant.character.escape.erlang' ],\n           regex: '(\\\\$)(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))' },\n         { token: 'invalid.illegal.character.erlang',\n           regex: '\\\\$\\\\\\\\\\\\^?.?' },\n         { token: \n            [ 'punctuation.definition.character.erlang',\n              'constant.character.erlang' ],\n           regex: '(\\\\$)(\\\\S)' },\n         { token: 'invalid.illegal.character.erlang', regex: '\\\\$.?' } ],\n      '#comment': \n       [ { token: 'punctuation.definition.comment.erlang',\n           regex: '%.*$',\n           push_: \n            [ { token: 'comment.line.percentage.erlang',\n                regex: '$',\n                next: 'pop' },\n              { defaultToken: 'comment.line.percentage.erlang' } ] } ],\n      '#define-directive': \n       [ { token: \n            [ 'meta.directive.define.erlang',\n              'punctuation.section.directive.begin.erlang',\n              'meta.directive.define.erlang',\n              'keyword.control.directive.define.erlang',\n              'meta.directive.define.erlang',\n              'punctuation.definition.parameters.begin.erlang',\n              'meta.directive.define.erlang',\n              'entity.name.function.macro.definition.erlang',\n              'meta.directive.define.erlang',\n              'punctuation.separator.parameters.erlang' ],\n           regex: '^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(,)',\n           push: \n            [ { token: \n                 [ 'punctuation.definition.parameters.end.erlang',\n                   'meta.directive.define.erlang',\n                   'punctuation.section.directive.end.erlang' ],\n                regex: '(\\\\))(\\\\s*)(\\\\.)',\n                next: 'pop' },\n              { include: '#everything-else' },\n              { defaultToken: 'meta.directive.define.erlang' } ] },\n         { token: 'meta.directive.define.erlang',\n           regex: '(?=^\\\\s*-\\\\s*define\\\\s*\\\\(\\\\s*[a-zA-Z\\\\d@_]+\\\\s*\\\\()',\n           push: \n            [ { token: \n                 [ 'punctuation.definition.parameters.end.erlang',\n                   'meta.directive.define.erlang',\n                   'punctuation.section.directive.end.erlang' ],\n                regex: '(\\\\))(\\\\s*)(\\\\.)',\n                next: 'pop' },\n              { token: \n                 [ 'text',\n                   'punctuation.section.directive.begin.erlang',\n                   'text',\n                   'keyword.control.directive.define.erlang',\n                   'text',\n                   'punctuation.definition.parameters.begin.erlang',\n                   'text',\n                   'entity.name.function.macro.definition.erlang',\n                   'text',\n                   'punctuation.definition.parameters.begin.erlang' ],\n                regex: '^(\\\\s*)(-)(\\\\s*)(define)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\()',\n                push: \n                 [ { token: \n                      [ 'punctuation.definition.parameters.end.erlang',\n                        'text',\n                        'punctuation.separator.parameters.erlang' ],\n                     regex: '(\\\\))(\\\\s*)(,)',\n                     next: 'pop' },\n                   { token: 'punctuation.separator.parameters.erlang', regex: ',' },\n                   { include: '#everything-else' } ] },\n              { token: 'punctuation.separator.define.erlang',\n                regex: '\\\\|\\\\||\\\\||:|;|,|\\\\.|->' },\n              { include: '#everything-else' },\n              { defaultToken: 'meta.directive.define.erlang' } ] } ],\n      '#directive': \n       [ { token: \n            [ 'meta.directive.erlang',\n              'punctuation.section.directive.begin.erlang',\n              'meta.directive.erlang',\n              'keyword.control.directive.erlang',\n              'meta.directive.erlang',\n              'punctuation.definition.parameters.begin.erlang' ],\n           regex: '^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\(?)',\n           push: \n            [ { token: \n                 [ 'punctuation.definition.parameters.end.erlang',\n                   'meta.directive.erlang',\n                   'punctuation.section.directive.end.erlang' ],\n                regex: '(\\\\)?)(\\\\s*)(\\\\.)',\n                next: 'pop' },\n              { include: '#everything-else' },\n              { defaultToken: 'meta.directive.erlang' } ] },\n         { token: \n            [ 'meta.directive.erlang',\n              'punctuation.section.directive.begin.erlang',\n              'meta.directive.erlang',\n              'keyword.control.directive.erlang',\n              'meta.directive.erlang',\n              'punctuation.section.directive.end.erlang' ],\n           regex: '^(\\\\s*)(-)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\.)' } ],\n      '#everything-else': \n       [ { include: '#comment' },\n         { include: '#record-usage' },\n         { include: '#macro-usage' },\n         { include: '#expression' },\n         { include: '#keyword' },\n         { include: '#textual-operator' },\n         { include: '#function-call' },\n         { include: '#tuple' },\n         { include: '#list' },\n         { include: '#binary' },\n         { include: '#parenthesized-expression' },\n         { include: '#character' },\n         { include: '#number' },\n         { include: '#atom' },\n         { include: '#string' },\n         { include: '#symbolic-operator' },\n         { include: '#variable' } ],\n      '#expression': \n       [ { token: 'keyword.control.if.erlang',\n           regex: '\\\\bif\\\\b',\n           push: \n            [ { token: 'keyword.control.end.erlang',\n                regex: '\\\\bend\\\\b',\n                next: 'pop' },\n              { include: '#internal-expression-punctuation' },\n              { include: '#everything-else' },\n              { defaultToken: 'meta.expression.if.erlang' } ] },\n         { token: 'keyword.control.case.erlang',\n           regex: '\\\\bcase\\\\b',\n           push: \n            [ { token: 'keyword.control.end.erlang',\n                regex: '\\\\bend\\\\b',\n                next: 'pop' },\n              { include: '#internal-expression-punctuation' },\n              { include: '#everything-else' },\n              { defaultToken: 'meta.expression.case.erlang' } ] },\n         { token: 'keyword.control.receive.erlang',\n           regex: '\\\\breceive\\\\b',\n           push: \n            [ { token: 'keyword.control.end.erlang',\n                regex: '\\\\bend\\\\b',\n                next: 'pop' },\n              { include: '#internal-expression-punctuation' },\n              { include: '#everything-else' },\n              { defaultToken: 'meta.expression.receive.erlang' } ] },\n         { token: \n            [ 'keyword.control.fun.erlang',\n              'text',\n              'entity.name.type.class.module.erlang',\n              'text',\n              'punctuation.separator.module-function.erlang',\n              'text',\n              'entity.name.function.erlang',\n              'text',\n              'punctuation.separator.function-arity.erlang' ],\n           regex: '\\\\b(fun)(\\\\s*)(?:([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(/)' },\n         { token: 'keyword.control.fun.erlang',\n           regex: '\\\\bfun\\\\b',\n           push: \n            [ { token: 'keyword.control.end.erlang',\n                regex: '\\\\bend\\\\b',\n                next: 'pop' },\n              { token: 'text',\n                regex: '(?=\\\\()',\n                push: \n                 [ { token: 'punctuation.separator.clauses.erlang',\n                     regex: ';|(?=\\\\bend\\\\b)',\n                     next: 'pop' },\n                   { include: '#internal-function-parts' } ] },\n              { include: '#everything-else' },\n              { defaultToken: 'meta.expression.fun.erlang' } ] },\n         { token: 'keyword.control.try.erlang',\n           regex: '\\\\btry\\\\b',\n           push: \n            [ { token: 'keyword.control.end.erlang',\n                regex: '\\\\bend\\\\b',\n                next: 'pop' },\n              { include: '#internal-expression-punctuation' },\n              { include: '#everything-else' },\n              { defaultToken: 'meta.expression.try.erlang' } ] },\n         { token: 'keyword.control.begin.erlang',\n           regex: '\\\\bbegin\\\\b',\n           push: \n            [ { token: 'keyword.control.end.erlang',\n                regex: '\\\\bend\\\\b',\n                next: 'pop' },\n              { include: '#internal-expression-punctuation' },\n              { include: '#everything-else' },\n              { defaultToken: 'meta.expression.begin.erlang' } ] },\n         { token: 'keyword.control.query.erlang',\n           regex: '\\\\bquery\\\\b',\n           push: \n            [ { token: 'keyword.control.end.erlang',\n                regex: '\\\\bend\\\\b',\n                next: 'pop' },\n              { include: '#everything-else' },\n              { defaultToken: 'meta.expression.query.erlang' } ] } ],\n      '#function': \n       [ { token: \n            [ 'meta.function.erlang',\n              'entity.name.function.definition.erlang',\n              'meta.function.erlang' ],\n           regex: '^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()',\n           push: \n            [ { token: 'punctuation.terminator.function.erlang',\n                regex: '\\\\.',\n                next: 'pop' },\n              { token: [ 'text', 'entity.name.function.erlang', 'text' ],\n                regex: '^(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(?=\\\\()' },\n              { token: 'text',\n                regex: '(?=\\\\()',\n                push: \n                 [ { token: 'punctuation.separator.clauses.erlang',\n                     regex: ';|(?=\\\\.)',\n                     next: 'pop' },\n                   { include: '#parenthesized-expression' },\n                   { include: '#internal-function-parts' } ] },\n              { include: '#everything-else' },\n              { defaultToken: 'meta.function.erlang' } ] } ],\n      '#function-call': \n       [ { token: 'meta.function-call.erlang',\n           regex: '(?=(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*(?:\\\\(|:\\\\s*(?:[a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')\\\\s*\\\\())',\n           push: \n            [ { token: 'punctuation.definition.parameters.end.erlang',\n                regex: '\\\\)',\n                next: 'pop' },\n              { token: \n                 [ 'entity.name.type.class.module.erlang',\n                   'text',\n                   'punctuation.separator.module-function.erlang',\n                   'text',\n                   'entity.name.function.guard.erlang',\n                   'text',\n                   'punctuation.definition.parameters.begin.erlang' ],\n                regex: '(?:(erlang)(\\\\s*)(:)(\\\\s*))?(is_atom|is_binary|is_constant|is_float|is_function|is_integer|is_list|is_number|is_pid|is_port|is_reference|is_tuple|is_record|abs|element|hd|length|node|round|self|size|tl|trunc)(\\\\s*)(\\\\()',\n                push: \n                 [ { token: 'text', regex: '(?=\\\\))', next: 'pop' },\n                   { token: 'punctuation.separator.parameters.erlang', regex: ',' },\n                   { include: '#everything-else' } ] },\n              { token: \n                 [ 'entity.name.type.class.module.erlang',\n                   'text',\n                   'punctuation.separator.module-function.erlang',\n                   'text',\n                   'entity.name.function.erlang',\n                   'text',\n                   'punctuation.definition.parameters.begin.erlang' ],\n                regex: '(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(:)(\\\\s*))?([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\()',\n                push: \n                 [ { token: 'text', regex: '(?=\\\\))', next: 'pop' },\n                   { token: 'punctuation.separator.parameters.erlang', regex: ',' },\n                   { include: '#everything-else' } ] },\n              { defaultToken: 'meta.function-call.erlang' } ] } ],\n      '#import-export-directive': \n       [ { token: \n            [ 'meta.directive.import.erlang',\n              'punctuation.section.directive.begin.erlang',\n              'meta.directive.import.erlang',\n              'keyword.control.directive.import.erlang',\n              'meta.directive.import.erlang',\n              'punctuation.definition.parameters.begin.erlang',\n              'meta.directive.import.erlang',\n              'entity.name.type.class.module.erlang',\n              'meta.directive.import.erlang',\n              'punctuation.separator.parameters.erlang' ],\n           regex: '^(\\\\s*)(-)(\\\\s*)(import)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',\n           push: \n            [ { token: \n                 [ 'punctuation.definition.parameters.end.erlang',\n                   'meta.directive.import.erlang',\n                   'punctuation.section.directive.end.erlang' ],\n                regex: '(\\\\))(\\\\s*)(\\\\.)',\n                next: 'pop' },\n              { include: '#internal-function-list' },\n              { defaultToken: 'meta.directive.import.erlang' } ] },\n         { token: \n            [ 'meta.directive.export.erlang',\n              'punctuation.section.directive.begin.erlang',\n              'meta.directive.export.erlang',\n              'keyword.control.directive.export.erlang',\n              'meta.directive.export.erlang',\n              'punctuation.definition.parameters.begin.erlang' ],\n           regex: '^(\\\\s*)(-)(\\\\s*)(export)(\\\\s*)(\\\\()',\n           push: \n            [ { token: \n                 [ 'punctuation.definition.parameters.end.erlang',\n                   'meta.directive.export.erlang',\n                   'punctuation.section.directive.end.erlang' ],\n                regex: '(\\\\))(\\\\s*)(\\\\.)',\n                next: 'pop' },\n              { include: '#internal-function-list' },\n              { defaultToken: 'meta.directive.export.erlang' } ] } ],\n      '#internal-expression-punctuation': \n       [ { token: \n            [ 'punctuation.separator.clause-head-body.erlang',\n              'punctuation.separator.clauses.erlang',\n              'punctuation.separator.expressions.erlang' ],\n           regex: '(->)|(;)|(,)' } ],\n      '#internal-function-list': \n       [ { token: 'punctuation.definition.list.begin.erlang',\n           regex: '\\\\[',\n           push: \n            [ { token: 'punctuation.definition.list.end.erlang',\n                regex: '\\\\]',\n                next: 'pop' },\n              { token: \n                 [ 'entity.name.function.erlang',\n                   'text',\n                   'punctuation.separator.function-arity.erlang' ],\n                regex: '([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(/)',\n                push: \n                 [ { token: 'punctuation.separator.list.erlang',\n                     regex: ',|(?=\\\\])',\n                     next: 'pop' },\n                   { include: '#everything-else' } ] },\n              { include: '#everything-else' },\n              { defaultToken: 'meta.structure.list.function.erlang' } ] } ],\n      '#internal-function-parts': \n       [ { token: 'text',\n           regex: '(?=\\\\()',\n           push: \n            [ { token: 'punctuation.separator.clause-head-body.erlang',\n                regex: '->',\n                next: 'pop' },\n              { token: 'punctuation.definition.parameters.begin.erlang',\n                regex: '\\\\(',\n                push: \n                 [ { token: 'punctuation.definition.parameters.end.erlang',\n                     regex: '\\\\)',\n                     next: 'pop' },\n                   { token: 'punctuation.separator.parameters.erlang', regex: ',' },\n                   { include: '#everything-else' } ] },\n              { token: 'punctuation.separator.guards.erlang', regex: ',|;' },\n              { include: '#everything-else' } ] },\n         { token: 'punctuation.separator.expressions.erlang',\n           regex: ',' },\n         { include: '#everything-else' } ],\n      '#internal-record-body': \n       [ { token: 'punctuation.definition.class.record.begin.erlang',\n           regex: '\\\\{',\n           push: \n            [ { token: 'meta.structure.record.erlang',\n                regex: '(?=\\\\})',\n                next: 'pop' },\n              { token: \n                 [ 'variable.other.field.erlang',\n                   'variable.language.omitted.field.erlang',\n                   'text',\n                   'keyword.operator.assignment.erlang' ],\n                regex: '(?:([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')|(_))(\\\\s*)(=|::)',\n                push: \n                 [ { token: 'punctuation.separator.class.record.erlang',\n                     regex: ',|(?=\\\\})',\n                     next: 'pop' },\n                   { include: '#everything-else' } ] },\n              { token: \n                 [ 'variable.other.field.erlang',\n                   'text',\n                   'punctuation.separator.class.record.erlang' ],\n                regex: '([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)((?:,)?)' },\n              { include: '#everything-else' },\n              { defaultToken: 'meta.structure.record.erlang' } ] } ],\n      '#internal-type-specifiers': \n       [ { token: 'punctuation.separator.value-type.erlang',\n           regex: '/',\n           push: \n            [ { token: 'text', regex: '(?=,|:|>>)', next: 'pop' },\n              { token: \n                 [ 'storage.type.erlang',\n                   'storage.modifier.signedness.erlang',\n                   'storage.modifier.endianness.erlang',\n                   'storage.modifier.unit.erlang',\n                   'punctuation.separator.type-specifiers.erlang' ],\n                regex: '(integer|float|binary|bytes|bitstring|bits)|(signed|unsigned)|(big|little|native)|(unit)|(-)' } ] } ],\n      '#keyword': \n       [ { token: 'keyword.control.erlang',\n           regex: '\\\\b(?:after|begin|case|catch|cond|end|fun|if|let|of|query|try|receive|when)\\\\b' } ],\n      '#list': \n       [ { token: 'punctuation.definition.list.begin.erlang',\n           regex: '\\\\[',\n           push: \n            [ { token: 'punctuation.definition.list.end.erlang',\n                regex: '\\\\]',\n                next: 'pop' },\n              { token: 'punctuation.separator.list.erlang',\n                regex: '\\\\||\\\\|\\\\||,' },\n              { include: '#everything-else' },\n              { defaultToken: 'meta.structure.list.erlang' } ] } ],\n      '#macro-directive': \n       [ { token: \n            [ 'meta.directive.ifdef.erlang',\n              'punctuation.section.directive.begin.erlang',\n              'meta.directive.ifdef.erlang',\n              'keyword.control.directive.ifdef.erlang',\n              'meta.directive.ifdef.erlang',\n              'punctuation.definition.parameters.begin.erlang',\n              'meta.directive.ifdef.erlang',\n              'entity.name.function.macro.erlang',\n              'meta.directive.ifdef.erlang',\n              'punctuation.definition.parameters.end.erlang',\n              'meta.directive.ifdef.erlang',\n              'punctuation.section.directive.end.erlang' ],\n           regex: '^(\\\\s*)(-)(\\\\s*)(ifdef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' },\n         { token: \n            [ 'meta.directive.ifndef.erlang',\n              'punctuation.section.directive.begin.erlang',\n              'meta.directive.ifndef.erlang',\n              'keyword.control.directive.ifndef.erlang',\n              'meta.directive.ifndef.erlang',\n              'punctuation.definition.parameters.begin.erlang',\n              'meta.directive.ifndef.erlang',\n              'entity.name.function.macro.erlang',\n              'meta.directive.ifndef.erlang',\n              'punctuation.definition.parameters.end.erlang',\n              'meta.directive.ifndef.erlang',\n              'punctuation.section.directive.end.erlang' ],\n           regex: '^(\\\\s*)(-)(\\\\s*)(ifndef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' },\n         { token: \n            [ 'meta.directive.undef.erlang',\n              'punctuation.section.directive.begin.erlang',\n              'meta.directive.undef.erlang',\n              'keyword.control.directive.undef.erlang',\n              'meta.directive.undef.erlang',\n              'punctuation.definition.parameters.begin.erlang',\n              'meta.directive.undef.erlang',\n              'entity.name.function.macro.erlang',\n              'meta.directive.undef.erlang',\n              'punctuation.definition.parameters.end.erlang',\n              'meta.directive.undef.erlang',\n              'punctuation.section.directive.end.erlang' ],\n           regex: '^(\\\\s*)(-)(\\\\s*)(undef)(\\\\s*)(\\\\()(\\\\s*)([a-zA-Z\\\\d@_]+)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' } ],\n      '#macro-usage': \n       [ { token: \n            [ 'keyword.operator.macro.erlang',\n              'meta.macro-usage.erlang',\n              'entity.name.function.macro.erlang' ],\n           regex: '(\\\\?\\\\??)(\\\\s*)([a-zA-Z\\\\d@_]+)' } ],\n      '#module-directive': \n       [ { token: \n            [ 'meta.directive.module.erlang',\n              'punctuation.section.directive.begin.erlang',\n              'meta.directive.module.erlang',\n              'keyword.control.directive.module.erlang',\n              'meta.directive.module.erlang',\n              'punctuation.definition.parameters.begin.erlang',\n              'meta.directive.module.erlang',\n              'entity.name.type.class.module.definition.erlang',\n              'meta.directive.module.erlang',\n              'punctuation.definition.parameters.end.erlang',\n              'meta.directive.module.erlang',\n              'punctuation.section.directive.end.erlang' ],\n           regex: '^(\\\\s*)(-)(\\\\s*)(module)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*)(\\\\s*)(\\\\))(\\\\s*)(\\\\.)' } ],\n      '#number': \n       [ { token: 'text',\n           regex: '(?=\\\\d)',\n           push: \n            [ { token: 'text', regex: '(?!\\\\d)', next: 'pop' },\n              { token: \n                 [ 'constant.numeric.float.erlang',\n                   'punctuation.separator.integer-float.erlang',\n                   'constant.numeric.float.erlang',\n                   'punctuation.separator.float-exponent.erlang' ],\n                regex: '(\\\\d+)(\\\\.)(\\\\d+)((?:[eE][\\\\+\\\\-]?\\\\d+)?)' },\n              { token: \n                 [ 'constant.numeric.integer.binary.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.binary.erlang' ],\n                regex: '(2)(#)([0-1]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-3.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-3.erlang' ],\n                regex: '(3)(#)([0-2]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-4.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-4.erlang' ],\n                regex: '(4)(#)([0-3]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-5.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-5.erlang' ],\n                regex: '(5)(#)([0-4]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-6.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-6.erlang' ],\n                regex: '(6)(#)([0-5]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-7.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-7.erlang' ],\n                regex: '(7)(#)([0-6]+)' },\n              { token: \n                 [ 'constant.numeric.integer.octal.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.octal.erlang' ],\n                regex: '(8)(#)([0-7]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-9.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-9.erlang' ],\n                regex: '(9)(#)([0-8]+)' },\n              { token: \n                 [ 'constant.numeric.integer.decimal.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.decimal.erlang' ],\n                regex: '(10)(#)(\\\\d+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-11.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-11.erlang' ],\n                regex: '(11)(#)([\\\\daA]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-12.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-12.erlang' ],\n                regex: '(12)(#)([\\\\da-bA-B]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-13.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-13.erlang' ],\n                regex: '(13)(#)([\\\\da-cA-C]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-14.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-14.erlang' ],\n                regex: '(14)(#)([\\\\da-dA-D]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-15.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-15.erlang' ],\n                regex: '(15)(#)([\\\\da-eA-E]+)' },\n              { token: \n                 [ 'constant.numeric.integer.hexadecimal.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.hexadecimal.erlang' ],\n                regex: '(16)(#)([\\\\da-fA-F]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-17.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-17.erlang' ],\n                regex: '(17)(#)([\\\\da-gA-G]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-18.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-18.erlang' ],\n                regex: '(18)(#)([\\\\da-hA-H]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-19.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-19.erlang' ],\n                regex: '(19)(#)([\\\\da-iA-I]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-20.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-20.erlang' ],\n                regex: '(20)(#)([\\\\da-jA-J]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-21.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-21.erlang' ],\n                regex: '(21)(#)([\\\\da-kA-K]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-22.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-22.erlang' ],\n                regex: '(22)(#)([\\\\da-lA-L]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-23.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-23.erlang' ],\n                regex: '(23)(#)([\\\\da-mA-M]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-24.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-24.erlang' ],\n                regex: '(24)(#)([\\\\da-nA-N]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-25.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-25.erlang' ],\n                regex: '(25)(#)([\\\\da-oA-O]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-26.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-26.erlang' ],\n                regex: '(26)(#)([\\\\da-pA-P]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-27.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-27.erlang' ],\n                regex: '(27)(#)([\\\\da-qA-Q]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-28.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-28.erlang' ],\n                regex: '(28)(#)([\\\\da-rA-R]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-29.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-29.erlang' ],\n                regex: '(29)(#)([\\\\da-sA-S]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-30.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-30.erlang' ],\n                regex: '(30)(#)([\\\\da-tA-T]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-31.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-31.erlang' ],\n                regex: '(31)(#)([\\\\da-uA-U]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-32.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-32.erlang' ],\n                regex: '(32)(#)([\\\\da-vA-V]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-33.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-33.erlang' ],\n                regex: '(33)(#)([\\\\da-wA-W]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-34.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-34.erlang' ],\n                regex: '(34)(#)([\\\\da-xA-X]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-35.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-35.erlang' ],\n                regex: '(35)(#)([\\\\da-yA-Y]+)' },\n              { token: \n                 [ 'constant.numeric.integer.base-36.erlang',\n                   'punctuation.separator.base-integer.erlang',\n                   'constant.numeric.integer.base-36.erlang' ],\n                regex: '(36)(#)([\\\\da-zA-Z]+)' },\n              { token: 'invalid.illegal.integer.erlang',\n                regex: '\\\\d+#[\\\\da-zA-Z]+' },\n              { token: 'constant.numeric.integer.decimal.erlang',\n                regex: '\\\\d+' } ] } ],\n      '#parenthesized-expression': \n       [ { token: 'punctuation.section.expression.begin.erlang',\n           regex: '\\\\(',\n           push: \n            [ { token: 'punctuation.section.expression.end.erlang',\n                regex: '\\\\)',\n                next: 'pop' },\n              { include: '#everything-else' },\n              { defaultToken: 'meta.expression.parenthesized' } ] } ],\n      '#record-directive': \n       [ { token: \n            [ 'meta.directive.record.erlang',\n              'punctuation.section.directive.begin.erlang',\n              'meta.directive.record.erlang',\n              'keyword.control.directive.import.erlang',\n              'meta.directive.record.erlang',\n              'punctuation.definition.parameters.begin.erlang',\n              'meta.directive.record.erlang',\n              'entity.name.type.class.record.definition.erlang',\n              'meta.directive.record.erlang',\n              'punctuation.separator.parameters.erlang' ],\n           regex: '^(\\\\s*)(-)(\\\\s*)(record)(\\\\s*)(\\\\()(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(,)',\n           push: \n            [ { token: \n                 [ 'punctuation.definition.class.record.end.erlang',\n                   'meta.directive.record.erlang',\n                   'punctuation.definition.parameters.end.erlang',\n                   'meta.directive.record.erlang',\n                   'punctuation.section.directive.end.erlang' ],\n                regex: '(\\\\})(\\\\s*)(\\\\))(\\\\s*)(\\\\.)',\n                next: 'pop' },\n              { include: '#internal-record-body' },\n              { defaultToken: 'meta.directive.record.erlang' } ] } ],\n      '#record-usage': \n       [ { token: \n            [ 'keyword.operator.record.erlang',\n              'meta.record-usage.erlang',\n              'entity.name.type.class.record.erlang',\n              'meta.record-usage.erlang',\n              'punctuation.separator.record-field.erlang',\n              'meta.record-usage.erlang',\n              'variable.other.field.erlang' ],\n           regex: '(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')(\\\\s*)(\\\\.)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')' },\n         { token: \n            [ 'keyword.operator.record.erlang',\n              'meta.record-usage.erlang',\n              'entity.name.type.class.record.erlang' ],\n           regex: '(#)(\\\\s*)([a-z][a-zA-Z\\\\d@_]*|\\'[^\\']*\\')',\n           push: \n            [ { token: 'punctuation.definition.class.record.end.erlang',\n                regex: '\\\\}',\n                next: 'pop' },\n              { include: '#internal-record-body' },\n              { defaultToken: 'meta.record-usage.erlang' } ] } ],\n      '#string': \n       [ { token: 'punctuation.definition.string.begin.erlang',\n           regex: '\"',\n           push: \n            [ { token: 'punctuation.definition.string.end.erlang',\n                regex: '\"',\n                next: 'pop' },\n              { token: \n                 [ 'punctuation.definition.escape.erlang',\n                   'constant.character.escape.erlang',\n                   'punctuation.definition.escape.erlang',\n                   'constant.character.escape.erlang',\n                   'constant.character.escape.erlang' ],\n                regex: '(\\\\\\\\)(?:([bdefnrstv\\\\\\\\\\'\"])|(\\\\^)([@-_])|([0-7]{1,3}))' },\n              { token: 'invalid.illegal.string.erlang', regex: '\\\\\\\\\\\\^?.?' },\n              { token: \n                 [ 'punctuation.definition.placeholder.erlang',\n                   'punctuation.separator.placeholder-parts.erlang',\n                   'constant.other.placeholder.erlang',\n                   'punctuation.separator.placeholder-parts.erlang',\n                   'punctuation.separator.placeholder-parts.erlang',\n                   'constant.other.placeholder.erlang',\n                   'punctuation.separator.placeholder-parts.erlang',\n                   'punctuation.separator.placeholder-parts.erlang',\n                   'punctuation.separator.placeholder-parts.erlang',\n                   'constant.other.placeholder.erlang',\n                   'constant.other.placeholder.erlang' ],\n                regex: '(~)(?:((?:\\\\-)?)(\\\\d+)|(\\\\*))?(?:(\\\\.)(?:(\\\\d+)|(\\\\*)))?(?:(\\\\.)(?:(\\\\*)|(.)))?([~cfegswpWPBX#bx\\\\+ni])' },\n              { token: \n                 [ 'punctuation.definition.placeholder.erlang',\n                   'punctuation.separator.placeholder-parts.erlang',\n                   'constant.other.placeholder.erlang',\n                   'constant.other.placeholder.erlang' ],\n                regex: '(~)((?:\\\\*)?)((?:\\\\d+)?)([~du\\\\-#fsacl])' },\n              { token: 'invalid.illegal.string.erlang', regex: '~.?' },\n              { defaultToken: 'string.quoted.double.erlang' } ] } ],\n      '#symbolic-operator': \n       [ { token: 'keyword.operator.symbolic.erlang',\n           regex: '\\\\+\\\\+|\\\\+|--|-|\\\\*|/=|/|=/=|=:=|==|=<|=|<-|<|>=|>|!|::' } ],\n      '#textual-operator': \n       [ { token: 'keyword.operator.textual.erlang',\n           regex: '\\\\b(?:andalso|band|and|bxor|xor|bor|orelse|or|bnot|not|bsl|bsr|div|rem)\\\\b' } ],\n      '#tuple': \n       [ { token: 'punctuation.definition.tuple.begin.erlang',\n           regex: '\\\\{',\n           push: \n            [ { token: 'punctuation.definition.tuple.end.erlang',\n                regex: '\\\\}',\n                next: 'pop' },\n              { token: 'punctuation.separator.tuple.erlang', regex: ',' },\n              { include: '#everything-else' },\n              { defaultToken: 'meta.structure.tuple.erlang' } ] } ],\n      '#variable': \n       [ { token: [ 'variable.other.erlang', 'variable.language.omitted.erlang' ],\n           regex: '(_[a-zA-Z\\\\d@_]+|[A-Z][a-zA-Z\\\\d@_]*)|(_)' } ] }\n    \n    this.normalizeRules();\n};\n\nErlangHighlightRules.metaData = { comment: 'The recognition of function definitions and compiler directives (such as module, record and macro definitions) acequires that each of the aforementioned constructs must be the first string inside a line (except for whitespace).  Also, the function/module/record/macro names must be given unquoted.  -- desp',\n      fileTypes: [ 'erl', 'hrl' ],\n      keyEquivalent: '^~E',\n      name: 'Erlang',\n      scopeName: 'source.erlang' }\n\n\noop.inherits(ErlangHighlightRules, TextHighlightRules);\n\nexports.ErlangHighlightRules = ErlangHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /(\\{|\\[)[^\\}\\]]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{]*(\\}|\\])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/erlang\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/erlang_highlight_rules\",\"ace/mode/folding/cstyle\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar ErlangHighlightRules = acequire(\"./erlang_highlight_rules\").ErlangHighlightRules;\nvar FoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = ErlangHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"%\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/erlang\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n\n\n\n// WEBPACK FOOTER //\n// /Users/dmp/Code/panneau/js/fields/code/node_modules/brace/mode/erlang.js"],"sourceRoot":""}